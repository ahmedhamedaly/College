


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1021 2018/2019 Lab 4
    3 00000000         ; 
    4 00000000         
    5 00000000                 AREA             RESET, CODE, READONLY
    6 00000000                 ENTRY
    7 00000000         ;
    8 00000000         ; Question 1(i) 
    9 00000000         ;
   10 00000000 E3A00000        MOV              R0, #0      ; Even or Odd
   11 00000004 E59F10FC        LDR              R1, =0x12345678 ; R1 = number
   12 00000008 E3A02000        MOV              R2, #0      ; Counter = 0
   13 0000000C E3510000 
                       L1      CMP              R1, #0      ; number != 0
   14 00000010 0A000004        BEQ              EN          ; if number = 0 go 
                                                            to EN
   15 00000014 E1B010A1        MOVS             R1, R1, LSR #1 ; Shift number b
                                                            y 1 to the right an
                                                            d store in number
   16 00000018 3AFFFFFB        BCC              L1          ; branch the carry 
                                                            to L1 if ends in 0
   17 0000001C 2AFFFFFF        BCS              L2          ; branch the carry 
                                                            to L2 if ends in 1
   18 00000020 E2822001 
                       L2      ADD              R2, R2, #1  ; counter + 1
   19 00000024 EAFFFFF8        B                L1          ; branch to L1
   20 00000028 E2020001 
                       EN      AND              R0, R2, #1  ; check if its even
                                                             or odd and put int
                                                            o R0
   21 0000002C         
   22 0000002C         ;
   23 0000002C         ; Question 1(ii) 
   24 0000002C         ;
   25 0000002C E3A00000        MOV              R0, #0      ; Even or Odd
   26 00000030 E59F10D4        LDR              R1, =0xF0F0F0F0 ; R1 = number
   27 00000034 E3A02000        MOV              R2, #0      ; Counter = 0
   28 00000038 E3510000 
                       L3      CMP              R1, #0      ; number != 0
   29 0000003C 0A000004        BEQ              EN2         ; if number = 0 go 
                                                            to EN
   30 00000040 E1B010A1        MOVS             R1, R1, LSR #1 ; Shift number b
                                                            y 1 to the right an
                                                            d store in number
   31 00000044 3AFFFFFB        BCC              L3          ; branch the carry 
                                                            to L1 if ends in 0
   32 00000048 2AFFFFFF        BCS              L4          ; branch the carry 
                                                            to L2 if ends in 1
   33 0000004C E2822001 
                       L4      ADD              R2, R2, #1  ; counter + 1
   34 00000050 EAFFFFF8        B                L3          ; branch to L1
   35 00000054 E2020001 
                       EN2     AND              R0, R2, #1  ; check if its even
                                                             or odd and put int
                                                            o R0
   36 00000058         
   37 00000058         ;
   38 00000058         ; Question 1(iii) 
   39 00000058         ;



ARM Macro Assembler    Page 2 


   40 00000058 E3A00000        MOV              R0, #0      ; Even or Odd
   41 0000005C E3A0102A        LDR              R1, =42     ; R1 = number
   42 00000060 E3A02000        MOV              R2, #0      ; Counter = 0
   43 00000064 E3510000 
                       L5      CMP              R1, #0      ; number != 0
   44 00000068 0A000004        BEQ              EN3         ; if number = 0 go 
                                                            to EN
   45 0000006C E1B010A1        MOVS             R1, R1, LSR #1 ; Shift number b
                                                            y 1 to the right an
                                                            d store in number
   46 00000070 3AFFFFFB        BCC              L5          ; branch the carry 
                                                            to L1 if ends in 0
   47 00000074 2AFFFFFF        BCS              L6          ; branch the carry 
                                                            to L2 if ends in 1
   48 00000078 E2822001 
                       L6      ADD              R2, R2, #1  ; counter + 1
   49 0000007C EAFFFFF8        B                L5          ; branch to L1
   50 00000080 E2020001 
                       EN3     AND              R0, R2, #1  ; check if its even
                                                             or odd and put int
                                                            o R0
   51 00000084         
   52 00000084         ;
   53 00000084         ; Question 2 - Algorithm 1 
   54 00000084         ;
   55 00000084 E3A0001B        LDR              R0, =27     ; N = 27
   56 00000088 E3A01007        LDR              R1, =7      ; D = 7
   57 0000008C E3A0201B        LDR              R2, =27     ; R := N
   58 00000090 E3A03000        LDR              R3, =0      ; Q := 0
   59 00000094 E1520001 
                       L7      CMP              R2, R1      ; R >= D
   60 00000098 3A000002        BLO              EN4         ; Branch low
   61 0000009C E2833001        ADD              R3, R3, #1  ; Q := Q + 1
   62 000000A0 E0422001        SUB              R2, R2, R1  ; R := R - 1
   63 000000A4 EAFFFFFA        B                L7          ; Branch L7
   64 000000A8 E1A00003 
                       EN4     MOV              R0, R3      ; Move Q to N
   65 000000AC E1A01002        MOV              R1, R2      ; Move R to D
   66 000000B0         
   67 000000B0         
   68 000000B0         ;
   69 000000B0         ; Question 2 - Algorithm 2
   70 000000B0         ;
   71 000000B0 E3A0001B        LDR              R0, =27     ; N = 27
   72 000000B4 E3A01007        LDR              R1, =7      ; D = 7
   73 000000B8 E3A02000        LDR              R2, =0      ; R := 0
   74 000000BC E3A03000        LDR              R3, =0      ; Q := 0
   75 000000C0 E3A04020        LDR              R4, =32     ; I = 0
   76 000000C4 E2444001 
                       L8      SUB              R4, R4, #1  ; n = Number of bit
                                                            s
   77 000000C8 E1A02082        MOV              R2, R2, LSL #1 ; R := R << 1
   78 000000CC E1A05430        MOV              R5, R0, LSR R4 ; R5 = N >> I
   79 000000D0 E2055001        AND              R5, R5, #1  ; ANDING R5 BY 1
   80 000000D4 E0822005        ADD              R2, R2, R5  ; R = R + R5
   81 000000D8 E1520001        CMP              R2, R1      ; R >= D
   82 000000DC 3AFFFFF8        BLO              L8          ; R < D
   83 000000E0 E0422001        SUB              R2, R2, R1  ; R := R - D
   84 000000E4 E1A03433        MOV              R3, R3, LSR R4 ; Q(i) := 1



ARM Macro Assembler    Page 3 


   85 000000E8 E3833001        ORR              R3, R3, #1  ; ORRING Q by 1
   86 000000EC E1A03413        MOV              R3, R3, LSL R4 ; Q = Q << I
   87 000000F0 E3540000        CMP              R4, #0      ; i < number of bit
                                                            s
   88 000000F4 0A000000        BEQ              EN5         ; i = number of bit
                                                            s
   89 000000F8 EAFFFFF1        B                L8          ; Branch L8
   90 000000FC E1A00003 
                       EN5     MOV              R0, R3      ; Move Q to N
   91 00000100 E1A01002        MOV              R1, R2      ; Move R to D 
   92 00000104         
   93 00000104 EAFFFFFE 
                       L       B                L           ; infinite loop to 
                                                            end
   94 00000108         
   95 00000108                 END
              12345678 
              F0F0F0F0 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab4.d -o.\objects\lab4.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 526" --list=.\listings\lab4.lst lab4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

EN 00000028

Symbol: EN
   Definitions
      At line 20 in file lab4.s
   Uses
      At line 14 in file lab4.s
Comment: EN used once
EN2 00000054

Symbol: EN2
   Definitions
      At line 35 in file lab4.s
   Uses
      At line 29 in file lab4.s
Comment: EN2 used once
EN3 00000080

Symbol: EN3
   Definitions
      At line 50 in file lab4.s
   Uses
      At line 44 in file lab4.s
Comment: EN3 used once
EN4 000000A8

Symbol: EN4
   Definitions
      At line 64 in file lab4.s
   Uses
      At line 60 in file lab4.s
Comment: EN4 used once
EN5 000000FC

Symbol: EN5
   Definitions
      At line 90 in file lab4.s
   Uses
      At line 88 in file lab4.s
Comment: EN5 used once
L 00000104

Symbol: L
   Definitions
      At line 93 in file lab4.s
   Uses
      At line 93 in file lab4.s
Comment: L used once
L1 0000000C

Symbol: L1
   Definitions
      At line 13 in file lab4.s
   Uses
      At line 16 in file lab4.s
      At line 19 in file lab4.s

L2 00000020




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: L2
   Definitions
      At line 18 in file lab4.s
   Uses
      At line 17 in file lab4.s
Comment: L2 used once
L3 00000038

Symbol: L3
   Definitions
      At line 28 in file lab4.s
   Uses
      At line 31 in file lab4.s
      At line 34 in file lab4.s

L4 0000004C

Symbol: L4
   Definitions
      At line 33 in file lab4.s
   Uses
      At line 32 in file lab4.s
Comment: L4 used once
L5 00000064

Symbol: L5
   Definitions
      At line 43 in file lab4.s
   Uses
      At line 46 in file lab4.s
      At line 49 in file lab4.s

L6 00000078

Symbol: L6
   Definitions
      At line 48 in file lab4.s
   Uses
      At line 47 in file lab4.s
Comment: L6 used once
L7 00000094

Symbol: L7
   Definitions
      At line 59 in file lab4.s
   Uses
      At line 63 in file lab4.s
Comment: L7 used once
L8 000000C4

Symbol: L8
   Definitions
      At line 76 in file lab4.s
   Uses
      At line 82 in file lab4.s
      At line 89 in file lab4.s

RESET 00000000




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: RESET
   Definitions
      At line 5 in file lab4.s
   Uses
      None
Comment: RESET unused
15 symbols
349 symbols in table
