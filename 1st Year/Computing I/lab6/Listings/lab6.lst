


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1021 2018/2019 Lab 6
    3 00000000         ;
    4 00000000         ; RAM @ 0x4000000 sz = 0x10000 (64K)
    5 00000000         ;
    6 00000000         
    7 00000000         ;
    8 00000000         ; hardware registers
    9 00000000         ;
   10 00000000         
   11 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
   12 00000000         
   13 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   14 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   15 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   16 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   17 00000000         
   18 00000000         
   19 00000000                 AREA             RESET, CODE, READONLY
   20 00000000                 ENTRY
   21 00000000         
   22 00000000         ; 
   23 00000000         ; hardware initialisation
   24 00000000         ;
   25 00000000 E59FD3A4        LDR              R13, =0x40010000 ; initialse SP
                                                            
   26 00000004 E59F03A4        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
   27 00000008 E3A01050        MOV              R1, #0x50
   28 0000000C E5C01000        STRB             R1, [R0]
   29 00000010 E59F039C        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
   30 00000014 E3A01002        LDR              R1, =0x02
   31 00000018 E5C01000        STRB             R1, [R0]
   32 0000001C         
   33 0000001C         ;
   34 0000001C         ; Sieve of Eratosthenes
   35 0000001C         ;
   36 0000001C E3A00101        LDR              R0, =0x40000000 
                                                            ; Load MEM(Sieve)
   37 00000020 E1A0C000        MOV              R12, R0     ; Move begining to 
                                                            MEM(R12)
   38 00000024 E59F138C        LDR              R1, =1000000 ; Load number of i
                                                            nteger
   39 00000028 E1A0B001        MOV              R11, R1     ; Move duplicate of
                                                             the number of inte
                                                            gers
   40 0000002C         
   41 0000002C E1A0000B        MOV              R0, R11     ; Move MEM(Sieve) t
                                                            o R11
   42 00000030 E3A01010        MOV              R1, #0x10   ; Move 16 to Diviso
                                                            r
   43 00000034 EB00008F        BL               DV          ; Branch-Link DV (D
                                                            iVide)



ARM Macro Assembler    Page 2 


   44 00000038         
   45 00000038 E2800001        ADD              R0, R0, #1  ; Add 1 to the quot
                                                            ient
   46 0000003C E1A0200C        MOV              R2, R12     ; Move begining of 
                                                            MEM into R2
   47 00000040 E0802002        ADD              R2, R0, R2  ; Add MEM needed ->
                                                             MEM address
   48 00000044 E1A0000C        MOV              R0, R12     ; Move the begining
                                                             of MEM address
   49 00000048         
   50 00000048 E3A030FF        MOV              R3, #0xFF   ; Move 0xFF to R3
   51 0000004C E1520000 
                       SB1     CMP              R2, R0      ; Compare MEM to ME
                                                            M needed
   52 00000050 0A000001        BEQ              IN          ; Branch (if equal)
                                                             to IN (INitialisat
                                                            ion)
   53 00000054 E4C03001        STRB             R3, [R0], #1 ; Store byte 0xFF 
                                                            into MEM needed and
                                                             incremement by 1
   54 00000058 EAFFFFFB        B                SB1         ; Branch to SB1 (Se
                                                            t Bits to 1)
   55 0000005C         
   56 0000005C E1A0000C 
                       IN      MOV              R0, R12     ; Move to beginging
                                                             of MEM address
   57 00000060 E3A02003        MOV              R2, #3      ; Move 3 to p
   58 00000064         
   59 00000064 E152000B 
                       OD      CMP              R2, R11     ; Compare p to N
   60 00000068 CA000069        BGT              PR          ; Branch (if greate
                                                            r) to PR (PRint end
                                                            )
   61 0000006C E1A08002        MOV              R8, R2      ; Move p into R8
   62 00000070 EA000015        B                NB          ; Branch NB (Next B
                                                            yte)
   63 00000074         
   64 00000074 E3520001 
                       CP      CMP              R2, #0x01   ; Compare p to 0x01
                                                            
   65 00000078 1A000010        BNE              MP          ; Branch (if not eq
                                                            ual) to MP (Move P)
                                                            
   66 0000007C E2855001        ADD              R5, R5, #1  ; Add 1 to prime co
                                                            unter
   67 00000080 E1A02008        MOV              R2, R8      ; Move p to into R2
                                                             (from duplicate)
   68 00000084 E3A0A002        MOV              R10, #0x02  ; Move 2 into R10 t
                                                            o multiply
   69 00000088 E00A0A92        MUL              R10, R2, R10 ; Multiply p by 2 
                                                            and stoer in k
   70 0000008C E15A000B 
                       KTN     CMP              R10, R11    ; Compare k to N
   71 00000090 CA00000A        BGT              MP          ; Branch (if greate
                                                            r) to MP (Move P)
   72 00000094         
   73 00000094 E1A0700A        MOV              R7, R10     ; Move k to R7 to s
                                                            tore
   74 00000098 E20AA001        AND              R10, R10, #1 ; And k to check i



ARM Macro Assembler    Page 3 


                                                            f odd
   75 0000009C E35A0001        CMP              R10, #1     ; Compare k to 1
   76 000000A0 1A000002        BNE              FR2         ; Branch (if not eq
                                                            ual) to FR2 (FOr lo
                                                            op 2)
   77 000000A4         
   78 000000A4 E1A0A007        MOV              R10, R7     ; Move dup of k to 
                                                            R10
   79 000000A8 E1A0300A        MOV              R3, R10     ; Move k to R3
   80 000000AC EA000031        B                CHK         ; Branch to CHK (CH
                                                            eck k)
   81 000000B0         
   82 000000B0 E1A0A007 
                       FR2     MOV              R10, R7     ; Move dup of k to 
                                                            R10
   83 000000B4 E1A02008        MOV              R2, R8      ; Move p to R2
   84 000000B8 E08AA002        ADD              R10, R10, R2 ; Add k to p 
   85 000000BC EAFFFFF2        B                KTN         ; Branch to KTN (co
                                                            mpare K to N)
   86 000000C0         
   87 000000C0 E1A02008 
                       MP      MOV              R2, R8      ; Move p to R2
   88 000000C4 E2822002        ADD              R2, R2, #2  ; Add 2 to p
   89 000000C8 EAFFFFE5        B                OD          ; Branch to OD (ODd
                                                             vs even)
   90 000000CC         
   91 000000CC E7DC2228 
                       NB      LDRB             R2, [R12, R8, LSR #4] ; Load by
                                                            te where p is store
                                                            d
   92 000000D0 E208400F        AND              R4, R8, #0x0F ; And R4, the rem
                                                            ainder of p by 16
   93 000000D4 E3540008        CMP              R4, #0x08   ; Compare until rem
                                                            ainder is lower tha
                                                            n 8
   94 000000D8 3A000015        BLO              RE1         ; Branch (if lower)
                                                             to RE1 (REmainder 
                                                            is 1?)
   95 000000DC         
   96 000000DC E3540009        CMP              R4, #0x09   ; Compare remainder
                                                             to 9
   97 000000E0 1A000003        BNE              RE2         ; Branch (if not eq
                                                            ual) to RE2 (REmain
                                                            der is 11?)
   98 000000E4         
   99 000000E4 E1A04084        MOV              R4, R4, LSL #1 ; Move R4 so MSB
                                                             is in 4th bit
  100 000000E8 E2022010        AND              R2, R2, #0x10 ; And R2 so it cl
                                                            ears all bits but 4
                                                            th bit
  101 000000EC E1A02222        MOV              R2, R2, LSR #4 ; Move 4th but i
                                                            nto 0 bit
  102 000000F0 EAFFFFDF        B                CP          ; Branch to CP (Che
                                                            ck Prime)
  103 000000F4         
  104 000000F4 E354000B 
                       RE2     CMP              R4, #0x0B   ; Compare remainder
                                                             to 11
  105 000000F8 1A000003        BNE              RE3         ; Branch (if not eq



ARM Macro Assembler    Page 4 


                                                            ual) to RE3 (REmain
                                                            der is 13?)
  106 000000FC         
  107 000000FC E1A04104        MOV              R4, R4, LSL #2 ; Move remainder
                                                             so MSB is 5th bit
  108 00000100 E2022020        AND              R2, R2, #0x20 ; And all bits ex
                                                            cept 5th bit
  109 00000104 E1A022A2        MOV              R2, R2, LSR #5 ; Move remainder
                                                             so 5th bit is the 
                                                            LSB
  110 00000108 EAFFFFD9        B                CP          ; Branch to CP (Che
                                                            ck Prime)
  111 0000010C         
  112 0000010C E354000D 
                       RE3     CMP              R4, #0x0D   ; Compare remainder
                                                             to 13
  113 00000110 1A000003        BNE              BC7         ; Branch (if not eq
                                                            ual) to BC7 (Bit Cl
                                                            ear except 7th)
  114 00000114         
  115 00000114 E1A04184        MOV              R4, R4, LSL #3 ; Move remainder
                                                             so 6th bit is the 
                                                            MSB
  116 00000118 E2022040        AND              R2, R2, #0x40 ; And all bits ex
                                                            cept 6th bit
  117 0000011C E1A02322        MOV              R2, R2, LSR #6 ; Move remainder
                                                             so 6th bit is the 
                                                            LSB
  118 00000120 EAFFFFD3        B                CP          ; Branch to CP (Che
                                                            ck Prime)
  119 00000124         
  120 00000124 E1A04204 
                       BC7     MOV              R4, R4, LSL #4 ; Move remainder
                                                             so MSB is 7th bit
  121 00000128 E2022080        AND              R2, R2, #0x80 ; And all bits ex
                                                            cept 7th bit
  122 0000012C E1A023A2        MOV              R2, R2, LSR #7 ; Move remainder
                                                             so 7th bit is the 
                                                            LSB
  123 00000130 EAFFFFCF        B                CP          ; Branch to CP (Che
                                                            ck Prime)
  124 00000134         
  125 00000134 E3540001 
                       RE1     CMP              R4, #0x01   ; Compare remainder
                                                             to 1
  126 00000138 1A000001        BNE              RE4         ; Branch (if not eq
                                                            ual) to RE4 (REmain
                                                            der is not 3?)
  127 0000013C         
  128 0000013C E2022001        AND              R2, R2, #0x01 ; And all bits ex
                                                            cept LSB
  129 00000140 EAFFFFCB        B                CP          ; Branch to CP (Che
                                                            ck Prime)
  130 00000144         
  131 00000144 E3540003 
                       RE4     CMP              R4, #0x03   ; Compare remainder
                                                             to 3
  132 00000148 1A000002        BNE              RE5         ; Branch (if not eq
                                                            ual) to RE5 (REmain



ARM Macro Assembler    Page 5 


                                                            der is not 5?)
  133 0000014C         
  134 0000014C E2022002        AND              R2, R2, #0x02 ; And all bits ex
                                                            cept first bit
  135 00000150 E1A020A2        MOV              R2, R2, LSR #1 
                                                            ; Move 1st to LSB
  136 00000154 EAFFFFC6        B                CP          ; Branch to CP (Che
                                                            ck Prime)
  137 00000158         
  138 00000158 E3540005 
                       RE5     CMP              R4, #0x05   ; Compare remainder
                                                             to 5
  139 0000015C 1A000002        BNE              BC3         ; Branch (if not eq
                                                            ual) to BC3 (Bit Cl
                                                            ear except 3rd bit)
                                                            
  140 00000160 E2022004        AND              R2, R2, #0x04 ; And all bits ex
                                                            cept 2nd bit
  141 00000164 E1A02122        MOV              R2, R2, LSR #2 ; Move 2nd bit i
                                                            nto LSB 
  142 00000168 EAFFFFC1        B                CP          ; Branch to CP (Che
                                                            ck Prime)
  143 0000016C         
  144 0000016C E2022008 
                       BC3     AND              R2, R2, #0x08 ; And all bits ex
                                                            cept 3rd bit
  145 00000170 E1A021A2        MOV              R2, R2, LSR #3 ; Move all bits 
                                                            except 3rd bit
  146 00000174 EAFFFFBE        B                CP          ; Branch to CP (Che
                                                            ck Prime)
  147 00000178         
  148 00000178 E3A09001 
                       CHK     MOV              R9, #1      ; Move 1 to R9
  149 0000017C E203300F        AND              R3, R3, #0x0F ; And remainder o
                                                            f k by 16
  150 00000180 E3530008        CMP              R3, #0x08   ; Compare k by 8 if
                                                             remainder is equal
                                                            
  151 00000184 CA000006        BGT              K9          ; Branch (if greate
                                                            r) to K9 (K is grea
                                                            ter than 9)
  152 00000188         
  153 00000188 E3530001        CMP              R3, #0x01   ; Compare k to 1
  154 0000018C 0A00001C        BEQ              K1          ; Branch (if equal)
                                                             to K1 (K is equal 
                                                            to 1)
  155 00000190         
  156 00000190 E3530003        CMP              R3, #0x03   ; Compare k to 3
  157 00000194 0A000014        BEQ              K3          ; Branch (if equal)
                                                             to K3 (K is equal 
                                                            to 3)
  158 00000198         
  159 00000198 E3530005        CMP              R3, #0x05   ; Compare k to 5
  160 0000019C 0A000014        BEQ              K5          ; Branch (if equal)
                                                             to K5 (K is equal 
                                                            to 5)
  161 000001A0         
  162 000001A0 EA000015        B                MK3         ; Branch to MK3 (Ma
                                                            sK 3rd bit)



ARM Macro Assembler    Page 6 


  163 000001A4         
  164 000001A4 E3530009 
                       K9      CMP              R3, #0x09   ; Compare k to 9
  165 000001A8 1A000002        BNE              KG9         ; Branch (if not eq
                                                            ual) to KG9 (K is G
                                                            reater than 9)
  166 000001AC         
  167 000001AC E1A03083        MOV              R3, R3, LSL #1 ; Move remainder
                                                             to get 4th but
  168 000001B0 E1A09209        MOV              R9, R9, LSL #4 ; Move mask to 4
                                                            th bit to clear
  169 000001B4 EA000012        B                K1          ; Branch to K1 (K i
                                                            s equal to 1)
  170 000001B8         
  171 000001B8 E353000B 
                       KG9     CMP              R3, #0x0B   ; Compare remainder
                                                             to 11
  172 000001BC 1A000002        BNE              RE6         ; Branch (if not eq
                                                            ual) to RE6 (REmain
                                                            der is 13?)
  173 000001C0         
  174 000001C0 E1A03103        MOV              R3, R3, LSL #2 ; Move remainder
                                                             to get the 5th bit
                                                            
  175 000001C4 E1A09289        MOV              R9, R9, LSL #5 ; Move mask to 5
                                                            th bit
  176 000001C8 EA00000D        B                K1          ; Branch to K1 (K i
                                                            s equal to 1)
  177 000001CC         
  178 000001CC E353000D 
                       RE6     CMP              R3, #0x0D   ; Compare remainder
                                                             to 13 
  179 000001D0 1A000002        BNE              B7          ; Branch (if not eq
                                                            ual) to B7 (Bit cle
                                                            ar 7th bit)
  180 000001D4         
  181 000001D4 E1A03183        MOV              R3, R3, LSL #3 ; Move remainder
                                                             to get 6th bit
  182 000001D8 E1A09309        MOV              R9, R9, LSL #6 ; Move mask to 6
                                                            th bit
  183 000001DC EA000008        B                K1          ; Branch to K1 (K i
                                                            s equal to 1)
  184 000001E0         
  185 000001E0 E1A03203 
                       B7      MOV              R3, R3, LSL #4 ; Move remainder
                                                             to get 7th bit
  186 000001E4 E1A09389        MOV              R9, R9, LSL #7 ; Move mask to g
                                                            et 7th bit
  187 000001E8 EA000005        B                K1          ; Branch to K1 (K i
                                                            s equal to 1)
  188 000001EC         
  189 000001EC E1A09089 
                       K3      MOV              R9, R9, LSL #1 ; Move mask into
                                                             1st bit
  190 000001F0 EA000003        B                K1          ; Branch to K1 (K i
                                                            s equal to 1)
  191 000001F4         
  192 000001F4 E1A09109 
                       K5      MOV              R9, R9, LSL #2 ; Move mask into



ARM Macro Assembler    Page 7 


                                                             2nd bit
  193 000001F8 EA000001        B                K1          ; Branch to K1 (K i
                                                            s equal to 1)
  194 000001FC         
  195 000001FC E1A09189 
                       MK3     MOV              R9, R9, LSL #3 ; Move mask into
                                                             3rd bit
  196 00000200 EAFFFFFF        B                K1          ; Branch to K1 (K i
                                                            s equal to 1)
  197 00000204         
  198 00000204 E7D06227 
                       K1      LDRB             R6, [R0, R7, LSR #4] ; Load byt
                                                            e to MEM address
  199 00000208 E1C63009        BIC              R3, R6, R9  ; Bit clear R9
  200 0000020C E7C03227        STRB             R3, [R0, R7, LSR #4] ; Store by
                                                            te of the cleared b
                                                            its
  201 00000210 EAFFFFA6        B                FR2         ; Branch to FR2 (FO
                                                            r loop 2)
  202 00000214         
  203 00000214 E59F01A0 
                       PR      LDR              R0, =one    ; Load "There are "
                                                            
  204 00000218 EB00005B        BL               PUTS        ; Branch-Link PUTS
  205 0000021C         
  206 0000021C E2855001        ADD              R5, R5, #1  ; Add the number 2 
                                                            to number of prime 
                                                            numbers
  207 00000220 E1A01005        MOV              R1, R5      ; Move counter to R
                                                            1
  208 00000224 EB000026        BL               PP          ; Branch-Link PP (P
                                                            rint Prime)
  209 00000228         
  210 00000228 EB00002F        BL               PI          ; Branch-Link PI (P
                                                            rint Integers)
  211 0000022C         
  212 0000022C E59F018C        LDR              R0, =two    ; Load " primes in 
                                                            the first "
  213 00000230 EB000055        BL               PUTS        ; Branch-Link PUTS
  214 00000234         
  215 00000234 E1A0100B        MOV              R1, R11     ; Move N into R1
  216 00000238 EB000021        BL               PP          ; Branch-Link PP (P
                                                            rint Prime)
  217 0000023C         
  218 0000023C EB00002A        BL               PI          ; Branch-Link PI (P
                                                            rint Integers)
  219 00000240         
  220 00000240 E59F017C        LDR              R0, =thr    ; Load " integers."
                                                            
  221 00000244         
  222 00000244 EB000050        BL               PUTS        ; Branch-Link PUTS
  223 00000248         
  224 00000248 54 68 65 
              72 65 20 
              61 72 65 
              20 00    one     DCB              "There are ", 0
  225 00000253 20 70 72 
              69 6D 65 
              73 20 69 



ARM Macro Assembler    Page 8 


              6E 20 74 
              68 65 20 
              66 69 72 
              73 74 20 
              00       two     DCB              " primes in the first ", 0
  226 00000269 20 69 6E 
              74 65 67 
              65 72 73 
              2E 00    thr     DCB              " integers.", 0
  227 00000274         
  228 00000274 EAFFFFFE 
                       STOP    B                STOP
  229 00000278         
  230 00000278         ;;
  231 00000278         ;; subroutines
  232 00000278         ;;
  233 00000278         
  234 00000278         ;
  235 00000278         ; DV
  236 00000278         ;
  237 00000278         ; DiVide 
  238 00000278         ;
  239 00000278         
  240 00000278 E92D4070 
                       DV      PUSH             {R4, R5, R6, LR}
  241 0000027C E1A02000        MOV              R2, R0      ; Move N to R2
  242 00000280 E1A03001        MOV              R3, R1      ; Move D to R1
  243 00000284 E3A00000        MOV              R0, #0      ; Move Q to 0
  244 00000288 E3A01000        MOV              R1, #0      ; Move R to 0
  245 0000028C E3A0401F        MOV              R4, #31     ; Move 31 to n
  246 00000290 E3A05001        MOV              R5, #1      ; Move 1 to mask
  247 00000294         
  248 00000294 E3540000 
                       DV0     CMP              R4, #0      ; Compare n to 0
  249 00000298 BA000008        BLT              DV2         ; Branch (if less t
                                                            han) to DV2 (DiVide
                                                             2)
  250 0000029C         
  251 0000029C E1A01081        MOV              R1, R1, LSL #1 ; Move Remaider 
                                                            by 1 to left
  252 000002A0 E0056432        AND              R6, R5, R2, LSR R4 
                                                            ; And R[0] to N[i]
  253 000002A4 E1811006        ORR              R1, R1, R6  ; Or remainder to R
                                                            [0]
  254 000002A8 E1510003        CMP              R1, R3      ; Compare remainder
                                                             to D
  255 000002AC BA000001        BLT              DV1         ; Branch (if less t
                                                            han) to DV1 (DiVide
                                                             1)
  256 000002B0         
  257 000002B0 E0411003        SUB              R1, R1, R3  ; Subtract remainde
                                                            r by D
  258 000002B4 E1800415        ORR              R0, R0, R5, LSL R4 
                                                            ; Or Q[i] to R4
  259 000002B8         
  260 000002B8 E2444001 
                       DV1     SUB              R4, R4, #1  ; Subtract n by 1
  261 000002BC EAFFFFF4        B                DV0         ; Branch DV0 (DiVid
                                                            e 0)



ARM Macro Assembler    Page 9 


  262 000002C0         
  263 000002C0 E8BD8070 
                       DV2     POP              {R4, R5, R6, PC}
  264 000002C4         
  265 000002C4         
  266 000002C4         ;
  267 000002C4         ; PP
  268 000002C4         ;
  269 000002C4         ; Print Prime
  270 000002C4         ;
  271 000002C4         
  272 000002C4 E92D4200 
                       PP      PUSH             {R9, LR}
  273 000002C8 E59F00F8        LDR              R0, =0x3B9ACA00 ; Load max powe
                                                            r to 10
  274 000002CC E1A09001        MOV              R9, R1      ; Move input number
                                                             to R9
  275 000002D0         
  276 000002D0 E1500009 
                       PP0     CMP              R0, R9      ; Compare max power
                                                             to 10 to number
  277 000002D4 9A000002        BLS              PP1         ; Branch (if less) 
                                                            to PP1 (Print Prime
                                                             1)
  278 000002D8         
  279 000002D8 E3A0100A        MOV              R1, #0x0A   ; Move 10 to R1
  280 000002DC EBFFFFE5        BL               DV          ; Branch-Link to DV
                                                             (DiVide)
  281 000002E0         
  282 000002E0 EAFFFFFA        B                PP0         ; Branch to PP0 (Pr
                                                            int Prime 0)
  283 000002E4 E1A01009 
                       PP1     MOV              R1, R9      ; Move R9 to input 
                                                            number
  284 000002E8 E8BD8200        POP              {R9, PC}
  285 000002EC         
  286 000002EC         ;
  287 000002EC         ; PI
  288 000002EC         ;
  289 000002EC         ; Print Integers 
  290 000002EC         ;
  291 000002EC         
  292 000002EC E92D4300 
                       PI      PUSH             {R8, R9, LR}
  293 000002F0 E1A09000        MOV              R9, R0      ; Move power of 10 
                                                            to R0
  294 000002F4 E1A00001        MOV              R0, R1      ; Move R0 to R1
  295 000002F8 E1A01009        MOV              R1, R9      ; Move R1 to R9
  296 000002FC         
  297 000002FC EBFFFFDD 
                       PI1     BL               DV          ; Branch-Link to DV
                                                             (DiVide)
  298 00000300         
  299 00000300 E1A08001        MOV              R8, R1      ; Move remainder to
                                                             R1
  300 00000304 E2800030        ADD              R0, R0, #0x30 ; Add 30 to mask
  301 00000308 EB000014        BL               PUT         ; Branch-Link to PU
                                                            T
  302 0000030C         



ARM Macro Assembler    Page 10 


  303 0000030C E1A00009        MOV              R0, R9      ; Move power of 10 
                                                            to R0
  304 00000310 E3A0100A        MOV              R1, #0x0A   ; Move 10 to D
  305 00000314 EBFFFFD7        BL               DV          ; Branch-Link to DV
                                                             (DiVide)
  306 00000318         
  307 00000318 E1A01000        MOV              R1, R0      ; Move new power of
                                                             10 to D
  308 0000031C E1A09000        MOV              R9, R0      ; Move new power of
                                                             10 to R9
  309 00000320 E1A00008        MOV              R0, R8      ; Move remainder to
                                                             R0
  310 00000324 E3520001        CMP              R2, #1      ; Compare new power
                                                             of 10 to 1
  311 00000328 0A000004        BEQ              PI3         ; Branch (if equal)
                                                             to PI3 (Print Inte
                                                            gers 3)
  312 0000032C         
  313 0000032C E351000A        CMP              R1, #0x0A   ; Compare power of 
                                                            10 to 10
  314 00000330 3A000000        BLO              PI2         ; Branch (if lower)
                                                             to PI2 (Print Inte
                                                            gers 2)
  315 00000334         
  316 00000334 EAFFFFF0        B                PI1         ; Branch PI1 (Print
                                                             Integers 1)
  317 00000338         
  318 00000338 E2800030 
                       PI2     ADD              R0, R0, #0x30 ; Add 30 to mask
  319 0000033C EB000007        BL               PUT         ; Branch-Link to PU
                                                            T
  320 00000340         
  321 00000340 E8BD8300 
                       PI3     POP              {R8, R9, PC}
  322 00000344         
  323 00000344         ;
  324 00000344         ; GET
  325 00000344         ;
  326 00000344         ; leaf function which returns ASCII character typed in U
                       ART #1 window in R0
  327 00000344         ;
  328 00000344         
  329 00000344 E59F1080 
                       GET     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  330 00000348 E5910000 
                       GET0    LDR              R0, [R1]    ; wait until
  331 0000034C E2100001        ANDS             R0, #0x01   ; receiver data
  332 00000350 0AFFFFFC        BEQ              GET0        ; ready
  333 00000354 E59F1074        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  334 00000358 E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  335 0000035C E12FFF1E        BX               LR          ; return
  336 00000360         
  337 00000360         ; 
  338 00000360         ; PUT
  339 00000360         ;



ARM Macro Assembler    Page 11 


  340 00000360         ; leaf function which sends ASCII character in R0 to UAR
                       T #1 window
  341 00000360         ;
  342 00000360         
  343 00000360 E59F1064 
                       PUT     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  344 00000364 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  345 00000368 E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  346 0000036C 0AFFFFFB        BEQ              PUT         ; empty
  347 00000370 E59F1058        LDR              R1, =U0THR  ; R1 -> U0THR
  348 00000374 E5C10000        STRB             R0, [R1]    ; output charcter
  349 00000378 E59F104C 
                       PUT0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  350 0000037C E5D11000        LDRB             R1, [R1]    ; wait until 
  351 00000380 E2111040        ANDS             R1, R1, #0x40 ; transmitter
  352 00000384 0AFFFFFB        BEQ              PUT0        ; empty (data flush
                                                            ed)
  353 00000388 E12FFF1E        BX               LR          ; return
  354 0000038C         
  355 0000038C         ; 
  356 0000038C         ; PUTS
  357 0000038C         ;
  358 0000038C         ; sends NUL terminated ASCII string (address in R0) to U
                       ART #1 window
  359 0000038C         ;
  360 0000038C         
  361 0000038C E92D4010 
                       PUTS    PUSH             {R4, LR}    ; push R4 and LR
  362 00000390 E1A04000        MOV              R4, R0      ; copy R0
  363 00000394 E4D40001 
                       PUTS0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  364 00000398 E3500000        CMP              R0, #0      ; 0?
  365 0000039C 0A000001        BEQ              PUTS1       ; return
  366 000003A0 EBFFFFEE        BL               PUT         ; put character
  367 000003A4 EAFFFFFA        B                PUTS0       ; next character
  368 000003A8 E8BD8010 
                       PUTS1   POP              {R4, PC}    ; pop R4 and PC
  369 000003AC         
  370 000003AC                 END
              40010000 
              E002C000 
              E000C00C 
              000F4240 
              00000000 
              00000000 
              00000000 
              3B9ACA00 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab6.d -o.\objects\lab6.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 526" --list=.\listings\lab6.lst lab6.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

B7 000001E0

Symbol: B7
   Definitions
      At line 185 in file lab6.s
   Uses
      At line 179 in file lab6.s
Comment: B7 used once
BC3 0000016C

Symbol: BC3
   Definitions
      At line 144 in file lab6.s
   Uses
      At line 139 in file lab6.s
Comment: BC3 used once
BC7 00000124

Symbol: BC7
   Definitions
      At line 120 in file lab6.s
   Uses
      At line 113 in file lab6.s
Comment: BC7 used once
CHK 00000178

Symbol: CHK
   Definitions
      At line 148 in file lab6.s
   Uses
      At line 80 in file lab6.s
Comment: CHK used once
CP 00000074

Symbol: CP
   Definitions
      At line 64 in file lab6.s
   Uses
      At line 102 in file lab6.s
      At line 110 in file lab6.s
      At line 118 in file lab6.s
      At line 123 in file lab6.s
      At line 129 in file lab6.s
      At line 136 in file lab6.s
      At line 142 in file lab6.s
      At line 146 in file lab6.s

DV 00000278

Symbol: DV
   Definitions
      At line 240 in file lab6.s
   Uses
      At line 43 in file lab6.s
      At line 280 in file lab6.s
      At line 297 in file lab6.s
      At line 305 in file lab6.s

DV0 00000294



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: DV0
   Definitions
      At line 248 in file lab6.s
   Uses
      At line 261 in file lab6.s
Comment: DV0 used once
DV1 000002B8

Symbol: DV1
   Definitions
      At line 260 in file lab6.s
   Uses
      At line 255 in file lab6.s
Comment: DV1 used once
DV2 000002C0

Symbol: DV2
   Definitions
      At line 263 in file lab6.s
   Uses
      At line 249 in file lab6.s
Comment: DV2 used once
FR2 000000B0

Symbol: FR2
   Definitions
      At line 82 in file lab6.s
   Uses
      At line 76 in file lab6.s
      At line 201 in file lab6.s

GET 00000344

Symbol: GET
   Definitions
      At line 329 in file lab6.s
   Uses
      None
Comment: GET unused
GET0 00000348

Symbol: GET0
   Definitions
      At line 330 in file lab6.s
   Uses
      At line 332 in file lab6.s
Comment: GET0 used once
IN 0000005C

Symbol: IN
   Definitions
      At line 56 in file lab6.s
   Uses
      At line 52 in file lab6.s
Comment: IN used once
K1 00000204

Symbol: K1



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 198 in file lab6.s
   Uses
      At line 154 in file lab6.s
      At line 169 in file lab6.s
      At line 176 in file lab6.s
      At line 183 in file lab6.s
      At line 187 in file lab6.s
      At line 190 in file lab6.s
      At line 193 in file lab6.s
      At line 196 in file lab6.s

K3 000001EC

Symbol: K3
   Definitions
      At line 189 in file lab6.s
   Uses
      At line 157 in file lab6.s
Comment: K3 used once
K5 000001F4

Symbol: K5
   Definitions
      At line 192 in file lab6.s
   Uses
      At line 160 in file lab6.s
Comment: K5 used once
K9 000001A4

Symbol: K9
   Definitions
      At line 164 in file lab6.s
   Uses
      At line 151 in file lab6.s
Comment: K9 used once
KG9 000001B8

Symbol: KG9
   Definitions
      At line 171 in file lab6.s
   Uses
      At line 165 in file lab6.s
Comment: KG9 used once
KTN 0000008C

Symbol: KTN
   Definitions
      At line 70 in file lab6.s
   Uses
      At line 85 in file lab6.s
Comment: KTN used once
MK3 000001FC

Symbol: MK3
   Definitions
      At line 195 in file lab6.s
   Uses
      At line 162 in file lab6.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: MK3 used once
MP 000000C0

Symbol: MP
   Definitions
      At line 87 in file lab6.s
   Uses
      At line 65 in file lab6.s
      At line 71 in file lab6.s

NB 000000CC

Symbol: NB
   Definitions
      At line 91 in file lab6.s
   Uses
      At line 62 in file lab6.s
Comment: NB used once
OD 00000064

Symbol: OD
   Definitions
      At line 59 in file lab6.s
   Uses
      At line 89 in file lab6.s
Comment: OD used once
PI 000002EC

Symbol: PI
   Definitions
      At line 292 in file lab6.s
   Uses
      At line 210 in file lab6.s
      At line 218 in file lab6.s

PI1 000002FC

Symbol: PI1
   Definitions
      At line 297 in file lab6.s
   Uses
      At line 316 in file lab6.s
Comment: PI1 used once
PI2 00000338

Symbol: PI2
   Definitions
      At line 318 in file lab6.s
   Uses
      At line 314 in file lab6.s
Comment: PI2 used once
PI3 00000340

Symbol: PI3
   Definitions
      At line 321 in file lab6.s
   Uses
      At line 311 in file lab6.s
Comment: PI3 used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

PP 000002C4

Symbol: PP
   Definitions
      At line 272 in file lab6.s
   Uses
      At line 208 in file lab6.s
      At line 216 in file lab6.s

PP0 000002D0

Symbol: PP0
   Definitions
      At line 276 in file lab6.s
   Uses
      At line 282 in file lab6.s
Comment: PP0 used once
PP1 000002E4

Symbol: PP1
   Definitions
      At line 283 in file lab6.s
   Uses
      At line 277 in file lab6.s
Comment: PP1 used once
PR 00000214

Symbol: PR
   Definitions
      At line 203 in file lab6.s
   Uses
      At line 60 in file lab6.s
Comment: PR used once
PUT 00000360

Symbol: PUT
   Definitions
      At line 343 in file lab6.s
   Uses
      At line 301 in file lab6.s
      At line 319 in file lab6.s
      At line 346 in file lab6.s
      At line 366 in file lab6.s

PUT0 00000378

Symbol: PUT0
   Definitions
      At line 349 in file lab6.s
   Uses
      At line 352 in file lab6.s
Comment: PUT0 used once
PUTS 0000038C

Symbol: PUTS
   Definitions
      At line 361 in file lab6.s
   Uses
      At line 204 in file lab6.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 213 in file lab6.s
      At line 222 in file lab6.s

PUTS0 00000394

Symbol: PUTS0
   Definitions
      At line 363 in file lab6.s
   Uses
      At line 367 in file lab6.s
Comment: PUTS0 used once
PUTS1 000003A8

Symbol: PUTS1
   Definitions
      At line 368 in file lab6.s
   Uses
      At line 365 in file lab6.s
Comment: PUTS1 used once
RE1 00000134

Symbol: RE1
   Definitions
      At line 125 in file lab6.s
   Uses
      At line 94 in file lab6.s
Comment: RE1 used once
RE2 000000F4

Symbol: RE2
   Definitions
      At line 104 in file lab6.s
   Uses
      At line 97 in file lab6.s
Comment: RE2 used once
RE3 0000010C

Symbol: RE3
   Definitions
      At line 112 in file lab6.s
   Uses
      At line 105 in file lab6.s
Comment: RE3 used once
RE4 00000144

Symbol: RE4
   Definitions
      At line 131 in file lab6.s
   Uses
      At line 126 in file lab6.s
Comment: RE4 used once
RE5 00000158

Symbol: RE5
   Definitions
      At line 138 in file lab6.s
   Uses
      At line 132 in file lab6.s
Comment: RE5 used once



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

RE6 000001CC

Symbol: RE6
   Definitions
      At line 178 in file lab6.s
   Uses
      At line 172 in file lab6.s
Comment: RE6 used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 19 in file lab6.s
   Uses
      None
Comment: RESET unused
SB1 0000004C

Symbol: SB1
   Definitions
      At line 51 in file lab6.s
   Uses
      At line 54 in file lab6.s
Comment: SB1 used once
STOP 00000274

Symbol: STOP
   Definitions
      At line 228 in file lab6.s
   Uses
      At line 228 in file lab6.s
Comment: STOP used once
one 00000248

Symbol: one
   Definitions
      At line 224 in file lab6.s
   Uses
      At line 203 in file lab6.s
Comment: one used once
thr 00000269

Symbol: thr
   Definitions
      At line 226 in file lab6.s
   Uses
      At line 220 in file lab6.s
Comment: thr used once
two 00000253

Symbol: two
   Definitions
      At line 225 in file lab6.s
   Uses
      At line 212 in file lab6.s
Comment: two used once
48 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 11 in file lab6.s
   Uses
      At line 26 in file lab6.s
Comment: PINSEL0 used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 15 in file lab6.s
   Uses
      At line 29 in file lab6.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 16 in file lab6.s
   Uses
      At line 329 in file lab6.s
      At line 343 in file lab6.s
      At line 349 in file lab6.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 13 in file lab6.s
   Uses
      At line 333 in file lab6.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 14 in file lab6.s
   Uses
      At line 347 in file lab6.s
Comment: U0THR used once
5 symbols
387 symbols in table
