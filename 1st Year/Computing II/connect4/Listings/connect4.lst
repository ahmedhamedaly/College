


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Mid-Term Assignment - Connect 4 - SOLUTION
    4 00000000         ;
    5 00000000         ; get, put and puts subroutines provided by jones@scss.t
                       cd.ie
    6 00000000         ;
    7 00000000         
    8 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
    9 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   10 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   11 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   12 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   13 00000000         
   14 00000000         
   15 00000000                 AREA             globals, DATA, READWRITE
   16 00000000 00 00 00 
              00 00 00 
              00       BOARD   DCB              0,0,0,0,0,0,0
   17 00000007 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   18 0000000E 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   19 00000015 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   20 0000001C 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   21 00000023 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   22 0000002A         
   23 0000002A         
   24 0000002A                 AREA             RESET, CODE, READONLY
   25 00000000                 ENTRY
   26 00000000         
   27 00000000         ; initialise SP to top of RAM
   28 00000000 E59FD77C        LDR              R13, =0x40010000 ; initialse SP
                                                            
   29 00000004         
   30 00000004         ; initialise the console
   31 00000004 EB000168        BL               inithw
   32 00000008         
   33 00000008         ;
   34 00000008         ; your program goes here
   35 00000008         ;
   36 00000008         
   37 00000008 E59F0778        LDR              R0, =str_go
   38 0000000C EB00017F        BL               puts
   39 00000010 E3A02001        MOV              R2, #1
   40 00000014 EB000004        BL               initialiseBoard



ARM Macro Assembler    Page 2 


   41 00000018         
   42 00000018 EB00000D 
                       repeat  BL               drawBoard
   43 0000001C EB00007B        BL               checkWinner
   44 00000020 EB000048        BL               makeMove
   45 00000024 EAFFFFFB        b                repeat
   46 00000028         
   47 00000028         
   48 00000028 EAFFFFFE 
                       stop    B                stop
   49 0000002C         
   50 0000002C         
   51 0000002C         ;
   52 0000002C         ; your subroutines go here
   53 0000002C         ;
   54 0000002C         
   55 0000002C         ;
   56 0000002C         ; initialiseBoard subroutine
   57 0000002C         ; initialises the connect 4 board 
   58 0000002C         ;
   59 0000002C         initialiseBoard
   60 0000002C E92D40F0        PUSH             {R4-R7, lr} ; PUSH
   61 00000030         
   62 00000030 E59F4754        LDR              R4, =0x400000B0 ; MEM[BOARD]
   63 00000034 E59F5754        LDR              R5, =BOARD  ; BOARD
   64 00000038         
   65 00000038 E356002A 
                       inBoard CMP              R6, #42     ; while (counter < 
                                                            42) {
   66 0000003C 2A000003        BHS              enBoard     ; 
   67 00000040 E7957106        LDR              R7, [R5, R6, LSL #2] ; load = B
                                                            OARD[row][column]; 
                                                            
   68 00000044 E7847106        STR              R7, [R4, R6, LSL #2] ; store = 
                                                            BOARD[row][column];
                                                            
   69 00000048 E2866001        ADD              R6, R6, #1  ; counter++;
   70 0000004C EAFFFFF9        B                inBoard     ; }
   71 00000050         
   72 00000050 E8BD80F0 
                       enBoard POP              {R4-R7, pc} ; POP
   73 00000054         
   74 00000054         ;
   75 00000054         ; drawBoard subroutine
   76 00000054         ; draws the connect 4 board
   77 00000054         ;
   78 00000054         drawBoard
   79 00000054 E92D41F0        PUSH             {R4-R8, lr} ; PUSH
   80 00000058         
   81 00000058 E59F0734        LDR              R0, =Rows   ; loads start of th
                                                            e rows into registe
                                                            r
   82 0000005C EB00016B        BL               puts        ; prints the text
   83 00000060         
   84 00000060 E59F4724        LDR              R4, =0x400000B0 ; loads mem for
                                                             board
   85 00000064         
   86 00000064 E355002A 
                       drBoard CMP              R5, #42     ; while (counter < 



ARM Macro Assembler    Page 3 


                                                            42) {
   87 00000068 2A000031        BHS              noDraw      ; 
   88 0000006C E3A07007        MOV              R7, #7      ; numberOfRows = 7;
                                                            
   89 00000070 E0080697        MUL              R8, R7, R6  ; column = counter2
                                                             * numberOfRows;
   90 00000074 E1550008        CMP              R5, R8      ; if (counter > col
                                                            umn) {
   91 00000078 3A00001E        BLO              nxCol       ; else {Next column
                                                            }
   92 0000007C E59F0714        LDR              R0, =NewLine ; [newLine]
   93 00000080 EB000162        BL               puts        ; 
   94 00000084 E2866001        ADD              R6, R6, #1  ; counter2++;
   95 00000088 E1A01006        MOV              R1, R6      ; columnNumber = co
                                                            unter2;
   96 0000008C         
   97 0000008C E3510001        CMP              R1, #1      ; if (columnNumber 
                                                            == 1) {
   98 00000090 1A000002        BNE              col2        ; else {col2}
   99 00000094 E59F0700        LDR              R0, =column1 ; [column1]
  100 00000098 EB00015C        BL               puts        ;
  101 0000009C EA000015        B                nxCol       ; }
  102 000000A0         
  103 000000A0 E3510002 
                       col2    CMP              R1, #2      ; if (columnNumber 
                                                            == 2) {
  104 000000A4 1A000002        BNE              col3        ; else {col3}
  105 000000A8 E59F06F0        LDR              R0, =column2 ; [column2]
  106 000000AC EB000157        BL               puts        ;
  107 000000B0 EA000010        B                nxCol       ; }
  108 000000B4         
  109 000000B4 E3510003 
                       col3    CMP              R1, #3      ; if (columnNumber 
                                                            == 3) {
  110 000000B8 1A000002        BNE              col4        ; else {col4}
  111 000000BC E59F06E0        LDR              R0, =column3 ; [column3]
  112 000000C0 EB000152        BL               puts        ;
  113 000000C4 EA00000B        B                nxCol       ; }
  114 000000C8         
  115 000000C8 E3510004 
                       col4    CMP              R1, #4      ; if (columnNumber 
                                                            == 4) {
  116 000000CC 1A000002        BNE              col5        ; else {col5}
  117 000000D0 E59F06D0        LDR              R0, =column4 ; [column4]
  118 000000D4 EB00014D        BL               puts        ;
  119 000000D8 EA000006        B                nxCol       ; }
  120 000000DC         
  121 000000DC E3510005 
                       col5    CMP              R1, #5      ; if (columnNumber 
                                                            == 5) {
  122 000000E0 1A000002        BNE              col6        ; else {col6}
  123 000000E4 E59F06C0        LDR              R0, =column5 ; [column5]
  124 000000E8 EB000148        BL               puts        ;
  125 000000EC EA000001        B                nxCol       ; }
  126 000000F0         
  127 000000F0 E59F06B8 
                       col6    LDR              R0, =column6 ; [column6]
  128 000000F4 EB000145        BL               puts        ; 
  129 000000F8         



ARM Macro Assembler    Page 4 


  130 000000F8 E7940105 
                       nxCol   LDR              R0, [R4, R5, LSL #2] ; load = B
                                                            OARD[row][column]
  131 000000FC E3500000        CMP              R0, #0      ; if (blank) {
  132 00000100 1A000002        BNE              redMove     ; else {RedsTurn}
  133 00000104 E59F06A8        LDR              R0, =Blank  ; [Blank]
  134 00000108 EB000140        BL               puts        ; 
  135 0000010C EA000006        B                count       ; }
  136 00000110         
  137 00000110 E3500001 
                       redMove CMP              R0, #1      ; if (RedsTurn) {
  138 00000114 1A000002        BNE              yelMove     ; else {YellowsTurn
                                                            }
  139 00000118 E59F0698        LDR              R0, =Red    ; [Red]
  140 0000011C EB00013B        BL               puts        ; 
  141 00000120 EA000001        B                count       ; }
  142 00000124         
  143 00000124 E59F0690 
                       yelMove LDR              R0, =Yellow ; [Yellow]
  144 00000128 EB000138        BL               puts        ;
  145 0000012C         
  146 0000012C E2855001 
                       count   ADD              R5, R5, #1  ; counter++
  147 00000130 EAFFFFCB        B                drBoard     ; }
  148 00000134         
  149 00000134 E59F065C 
                       noDraw  LDR              R0, =NewLine ; [newLine]
  150 00000138 EB000134        BL               puts        ; 
  151 0000013C E59F0654        LDR              R0, =NewLine ; [newLine]
  152 00000140 EB000132        BL               puts        ; 
  153 00000144         
  154 00000144 E8BD81F0        POP              {R4-R8, pc} ; POP
  155 00000148         
  156 00000148         ;
  157 00000148         ; makeMove subroutine
  158 00000148         ; Makes a move according to which players turn it is
  159 00000148         ;
  160 00000148         
  161 00000148         makeMove
  162 00000148 E92D4070        PUSH             {R4-R6, lr} ; PUSH
  163 0000014C         
  164 0000014C E59F4674        LDR              R4, =0x4000013C ; MEM[BOARD]
  165 00000150 E3A05006        LDR              R5, =6      ; columns = 6
  166 00000154         
  167 00000154 E3520001        CMP              R2, #1      ; if (RedsTurn) {
  168 00000158 1A000002        BNE              yelTurn     ; else {yelTurn}
  169 0000015C E59F065C        LDR              R0, =RedsTurn ; [RedsTurn]
  170 00000160 EB00012A        BL               puts        ; 
  171 00000164 EA000001        B                sk          ; }
  172 00000168         
  173 00000168 E59F0654 
                       yelTurn LDR              R0, =YellowsTurn 
                                                            ; [YellowsTurn]
  174 0000016C EB000127        BL               puts        ; 
  175 00000170         
  176 00000170 EB000114 
                       sk      BL               get         ; userInput.get();
  177 00000174         
  178 00000174 EB00011A        BL               put         ;



ARM Macro Assembler    Page 5 


  179 00000178         
  180 00000178 E3500071        CMP              R0, #0x71   ; if (userInput == 
                                                            'q') {
  181 0000017C 0A000101        BEQ              quit        ; }
  182 00000180         
  183 00000180 E2400030        SUB              R0, R0, #0x30 ; ASCII (Numbers 
                                                            go from 1 - 7) [fix
                                                            ]
  184 00000184         
  185 00000184 E3500000        CMP              R0, #0      ; if (userInput < 1
                                                            ) {
  186 00000188 9A00000D        BLS              noInput     ; }
  187 0000018C         
  188 0000018C E3500007        CMP              R0, #7      ; if (userInput > 7
                                                            ) {
  189 00000190 8A00000B        BHI              noInput     ; }
  190 00000194         
  191 00000194 E2400001        SUB              R0, R0, #1  ; index starts at 0
                                                             [fix]
  192 00000198         
  193 00000198 E3A06004        LDR              R6, =4      ; offset = 4;
  194 0000019C E0060690        MUL              R6, R0, R6  ; userInput * offse
                                                            t;
  195 000001A0 E0864004        ADD              R4, R6, R4  ; MEM[BOARD] += off
                                                            set;
  196 000001A4         
  197 000001A4 E5943000 
                       rep     LDR              R3, [R4]    ; placeIsAvail = cu
                                                            rrentAddress;
  198 000001A8 E3530000        CMP              R3, #0      ; if (placeIsAvail)
                                                             {
  199 000001AC 0A00000B        BEQ              place       ; }
  200 000001B0 E2455001        SUB              R5, R5, #1  ; column--;
  201 000001B4 E244401C        SUB              R4, R4, #28 ; MEM[BOARD] - 28
  202 000001B8         
  203 000001B8 E3550000        CMP              R5, #0      ; if (column == 0) 
                                                            {
  204 000001BC 0A000000        BEQ              noInput     ; }
  205 000001C0 EAFFFFF7        B                rep         ; 
  206 000001C4         
  207 000001C4         
  208 000001C4 E59F05CC 
                       noInput LDR              R0, =NewLine ; [NewLine]
  209 000001C8 EB000110        BL               puts        ;
  210 000001CC E59F05C4        LDR              R0, =NewLine ; [NewLine]
  211 000001D0 EB00010E        BL               puts        ; 
  212 000001D4 E59F05F0        LDR              R0, =InvalidInput 
                                                            ; [InvalidInput]
  213 000001D8 EB00010C        BL               puts        ;
  214 000001DC EA000006        B                re          ; 
  215 000001E0         
  216 000001E0 E5842000 
                       place   STR              R2, [R4]    ; currentPlayer = p
                                                            lace;
  217 000001E4 E1A03004        MOV              R3, R4      ; savePos;
  218 000001E8         
  219 000001E8 E3520001        CMP              R2, #1      ; if (redsTurn) {
  220 000001EC 1A000001        BNE              yt          ; else {yellowsTurn
                                                            }



ARM Macro Assembler    Page 6 


  221 000001F0 E3A02002        LDR              R2, =2      ; currentTurn = yel
                                                            low;
  222 000001F4 EA000000        B                re          ;
  223 000001F8 E3A02001 
                       yt      LDR              R2, =1      ; currentTurn = red
                                                            ;
  224 000001FC         
  225 000001FC E59F0594 
                       re      LDR              R0, =NewLine ; [NewLine]
  226 00000200 EB000102        BL               puts        ; 
  227 00000204 E59F058C        LDR              R0, =NewLine ; [NewLine]
  228 00000208 EB000100        BL               puts        ;
  229 0000020C         
  230 0000020C         
  231 0000020C E8BD8070        POP              {R4-R6, pc} ; POP
  232 00000210         
  233 00000210         ;
  234 00000210         ; checkWinner subroutine
  235 00000210         ; Makes a move according to which players turn it is
  236 00000210         ; 
  237 00000210         checkWinner
  238 00000210 E52DE004        PUSH             {lr}
  239 00000214         
  240 00000214 EB00000E        BL               checkHorizontal
  241 00000218 EB000034        BL               checkVertical
  242 0000021C EB000064        BL               checkDiagonalForward
  243 00000220 EB00009C        BL               checkDiagonalBackward
  244 00000224         
  245 00000224 EB000000        BL               checkBoardFull
  246 00000228 E49DF004        POP              {pc}
  247 0000022C         
  248 0000022C         ;
  249 0000022C         ;
  250 0000022C         ;
  251 0000022C         checkBoardFull
  252 0000022C E92D5FF0        PUSH             {R4 - R12, lr}
  253 00000230         
  254 00000230 E59F4554        LDR              R4, =0x400000B0
  255 00000234         
  256 00000234 E355002A 
                       boardF  CMP              R5, #42
  257 00000238 0A0000CF        BEQ              noSpace
  258 0000023C E7940105        LDR              R0, [R4, R5, LSL #2]
  259 00000240 E3500000        CMP              R0, #0
  260 00000244 0A000001        BEQ              enFull
  261 00000248 E2855001        ADD              R5, R5, #1
  262 0000024C EAFFFFF8        B                boardF
  263 00000250         
  264 00000250 E8BD9FF0 
                       enFull  POP              {R4 - R12, pc}
  265 00000254         ;
  266 00000254         ;
  267 00000254         ;
  268 00000254         checkHorizontal
  269 00000254 E92D5FF0        PUSH             {R4 - R12, lr} ; PUSH
  270 00000258         
  271 00000258 E59F452C        LDR              R4, =0x400000B0 ; MEM[BOARD]
  272 0000025C         
  273 0000025C E355002A 



ARM Macro Assembler    Page 7 


                       ckBoard CMP              R5, #42     ; if (counter < 42)
                                                             {
  274 00000260 2A000021        BHS              noCheck     ; else {noCheck}
  275 00000264 E7940105        LDR              R0, [R4, R5, LSL #2] ; load = B
                                                            OARD[row][column];
  276 00000268         
  277 00000268 E3A09007        MOV              R9, #7      ; numberOfRows = 7;
                                                            
  278 0000026C E00A0B99        MUL              R10, R9, R11 ; counter2 * numbe
                                                            rOfRows = columnNum
                                                            ber;
  279 00000270 E155000A        CMP              R5, R10     ; if (counter > col
                                                            umnNumber) {
  280 00000274 3A000002        BLO              cont        ; else {continue}
  281 00000278 E28BB001        ADD              R11, R11, #1 ; counter2++
  282 0000027C E3A07000        MOV              R7, #0      ; redStreak = 0;
  283 00000280 E3A08000        MOV              R8, #0      ; yellowStreak = 0;
                                                            
  284 00000284         
  285 00000284 E3500000 
                       cont    CMP              R0, #0      ; if (blank) {
  286 00000288 1A000001        BNE              red         ; else {red}
  287 0000028C E1A06000        MOV              R6, R0      ; prevNumber = 0;
  288 00000290 EA00000F        B                loopCk      ; }
  289 00000294         
  290 00000294 E3500001 
                       red     CMP              R0, #1      ; if (redMove) {
  291 00000298 1A000005        BNE              yel         ; else {yellow}
  292 0000029C E1560000        CMP              R6, R0      ; if (prevNumber ==
                                                             redPlayer) {
  293 000002A0 0A000000        BEQ              winRed      ; else {redCounter+
                                                            +}
  294 000002A4 E3A07000        MOV              R7, #0      ; redCounter = 0;
  295 000002A8 E2877001 
                       winRed  ADD              R7, R7, #1  ; redCounter++
  296 000002AC E1A06000        MOV              R6, R0      ; prevNumber = 1;
  297 000002B0 EA000007        B                loopCk      ; }
  298 000002B4         
  299 000002B4 E3500002 
                       yel     CMP              R0, #2      ; if (yellowMove) {
                                                            
  300 000002B8 1A00000B        BNE              noCheck     ; else {noCheck}
  301 000002BC E1560000        CMP              R6, R0      ; if (prevNumber ==
                                                             yellowPlayer) {
  302 000002C0 0A000000        BEQ              winYel      ; else {yellowCount
                                                            er++}
  303 000002C4 E3A08000        MOV              R8, #0      ; yellowCounter = 0
                                                            ;
  304 000002C8 E2888001 
                       winYel  ADD              R8, R8, #1  ; yellowCounter++;
  305 000002CC E1A06000        MOV              R6, R0      ; prevNumber = 2;
  306 000002D0 EAFFFFFF        B                loopCk      ; }
  307 000002D4         
  308 000002D4 E3570004 
                       loopCk  CMP              R7, #4      ; if (redCounter >=
                                                             4) {
  309 000002D8 2A0000AD        BHS              redWin      ; }
  310 000002DC E3580004        CMP              R8, #4      ; if (yellowCounter
                                                             >= 4) {



ARM Macro Assembler    Page 8 


  311 000002E0 2A0000AE        BHS              yelWin      ; }
  312 000002E4 E2855001        ADD              R5, R5, #1  ; counter++
  313 000002E8 EAFFFFDB        B                ckBoard     ; }
  314 000002EC         
  315 000002EC         
  316 000002EC E8BD9FF0 
                       noCheck POP              {R4 - R12, PC} ; POP
  317 000002F0         
  318 000002F0         ;
  319 000002F0         ;
  320 000002F0         ;
  321 000002F0         checkVertical
  322 000002F0 E92D5FF0        PUSH             {R4 - R12, lr} ; PUSH
  323 000002F4         
  324 000002F4 E59F4490        LDR              R4, =0x400000B0 ; MEM[BOARD];
  325 000002F8         
  326 000002F8 E355002A 
                       CkV     CMP              R5, #42     ; if (counter > 42)
                                                             {
  327 000002FC 2A00002B        BHS              noV         ; }
  328 00000300 E794010C        LDR              R0, [R4, R12, LSL #2] ; load = 
                                                            BOARD[row][column];
                                                            
  329 00000304 E28CC007        ADD              R12, R12, #7 ; offSet = 7;
  330 00000308         
  331 00000308 E3500000        CMP              R0, #0      ; if (blank) {
  332 0000030C 1A000001        BNE              vred        ; else {red}
  333 00000310 E1A06000        MOV              R6, R0      ; prevNumber = 0;
  334 00000314 EA00000E        B                vch         ; }
  335 00000318         
  336 00000318 E3500001 
                       vred    CMP              R0, #1      ; if (redMove) {
  337 0000031C 1A000005        BNE              vyel        ; else {yellowMove}
                                                            
  338 00000320 E1560000        CMP              R6, R0      ; if (prevNumber ==
                                                             1) {
  339 00000324 0A000000        BEQ              winRedV     ; else {redCounter+
                                                            +}
  340 00000328 E3A07000        MOV              R7, #0      ; redCounter = 0;
  341 0000032C E2877001 
                       winRedV ADD              R7, R7, #1  ; redCounter++;
  342 00000330 E1A06000        MOV              R6, R0      ; prevNumber = 1;
  343 00000334 EA000006        B                vch         ; }
  344 00000338         
  345 00000338 E3500002 
                       vyel    CMP              R0, #2      ; if (yellowMove) {
                                                            
  346 0000033C 1A00001B        BNE              noV         ; else {noCheck}
  347 00000340 E1560000        CMP              R6, R0      ; if (prevNumber ==
                                                             2) {
  348 00000344 0A000000        BEQ              winYelV     ; else {yellowCount
                                                            er++}
  349 00000348 E3A08000        MOV              R8, #0      ; yellowCounter = 0
                                                            ;
  350 0000034C E2888001 
                       winYelV ADD              R8, R8, #1  ; yellowCounter++;
  351 00000350 E1A06000        MOV              R6, R0      ; prevNumber = 2;
  352 00000354         
  353 00000354 E2855001 



ARM Macro Assembler    Page 9 


                       vch     ADD              R5, R5, #1  ; }
  354 00000358         
  355 00000358 E3570004        CMP              R7, #4      ; if (redCounter >=
                                                             4) {
  356 0000035C 2A00008C        BHS              redWin      ; }
  357 00000360 E3580004        CMP              R8, #4      ; if (yellowCounter
                                                             >= 4) {
  358 00000364 2A00008D        BHS              yelWin      ; }
  359 00000368         
  360 00000368 E3550006        CMP              R5, #6      ; if (counter == 6)
                                                             {
  361 0000036C 0A00000A        BEQ              load        ; }
  362 00000370 E355000C        CMP              R5, #12     ; if (counter == 12
                                                            ) {
  363 00000374 0A000008        BEQ              load        ; }
  364 00000378 E3550012        CMP              R5, #18     ; if (counter == 18
                                                            ) {
  365 0000037C 0A000006        BEQ              load        ; }
  366 00000380 E3550018        CMP              R5, #24     ; if (counter == 24
                                                            ) {
  367 00000384 0A000004        BEQ              load        ; }
  368 00000388 E355001E        CMP              R5, #30     ; if (counter == 30
                                                            ) {
  369 0000038C 0A000002        BEQ              load        ; }
  370 00000390 E3550024        CMP              R5, #36     ; if (counter == 36
                                                            ) {
  371 00000394 0A000000        BEQ              load        ; }
  372 00000398         
  373 00000398 EAFFFFD6        B                CkV         ; }
  374 0000039C         
  375 0000039C E2844004 
                       load    ADD              R4, R4, #4  ; MEM[BOARD] += 4;
  376 000003A0 E3A07000        MOV              R7, #0      ; yellowCounter = 0
                                                            ;
  377 000003A4 E3A08000        MOV              R8, #0      ; redCounter = 0;
  378 000003A8 E3A0C000        MOV              R12, #0     ; offSet = 0;
  379 000003AC EAFFFFD1        B                CkV         ; }
  380 000003B0         
  381 000003B0 E8BD9FF0 
                       noV     POP              {R4 - R12, pc} ; POP
  382 000003B4         
  383 000003B4         ;
  384 000003B4         ;
  385 000003B4         ;
  386 000003B4         checkDiagonalForward
  387 000003B4 E92D5FF0        PUSH             {R4 - R12, lr} ; PUSH
  388 000003B8         
  389 000003B8 E59F43CC        LDR              R4, =0x400000B0 ; BOARD[row][co
                                                            lumn]
  390 000003BC         
  391 000003BC E3550006 
                       ff      CMP              R5, #6      ; if (counter > 6) 
                                                            {
  392 000003C0 2A000022        BHS              fs          ; }
  393 000003C4 E794010C        LDR              R0, [R4, R12, LSL #2] ; load = 
                                                            BOARD[1][column]
  394 000003C8 E28CC008        ADD              R12, R12, #8 ; offSet += 8;
  395 000003CC E2855001        ADD              R5, R5, #1  ; counter++;
  396 000003D0         



ARM Macro Assembler    Page 10 


  397 000003D0 E3550006        CMP              R5, #6      ; if (counter != 6)
                                                             {
  398 000003D4 1A000002        BNE              aga         ; }
  399 000003D8 E28AA004        ADD              R10, R10, #4 ; offSet2 += 4;
  400 000003DC E35A0010        CMP              R10, #16    ; if (offSet2 == 16
                                                            ) {
  401 000003E0 0A000017        BEQ              fasd        ; }
  402 000003E4         
  403 000003E4 E3500000 
                       aga     CMP              R0, #0      ; if (blank) {
  404 000003E8 1A000001        BNE              fred        ; else {red}
  405 000003EC E1A06000        MOV              R6, R0      ; prevNumber = 0;
  406 000003F0 EAFFFFF1        B                ff          ; }
  407 000003F4         
  408 000003F4 E3500001 
                       fred    CMP              R0, #1      ; if (red) {
  409 000003F8 1A000005        BNE              fyel        ; else {yellow}
  410 000003FC E1560000        CMP              R6, R0      ; if (prevNumber ==
                                                             1) {
  411 00000400 0A000000        BEQ              winRedf     ; else {redCounter+
                                                            +}
  412 00000404 E3A07000        MOV              R7, #0      ; redCounter = 0;
  413 00000408 E2877001 
                       winRedf ADD              R7, R7, #1  ; redCounter++;
  414 0000040C E1A06000        MOV              R6, R0      ; prevNumber = 1;
  415 00000410 EAFFFFE9        B                ff          ; }
  416 00000414         
  417 00000414 E3500002 
                       fyel    CMP              R0, #2      ; if (yellow) {
  418 00000418 1A00001D        BNE              nof         ; else {no}
  419 0000041C E1560000        CMP              R6, R0      ; if (prevNumber ==
                                                             2) {
  420 00000420 0A000000        BEQ              winYelf     ; }
  421 00000424 E3A08000        MOV              R8, #0      ; yellowCounter = 0
                                                            ;
  422 00000428 E2888001 
                       winYelf ADD              R8, R8, #1  ; yellowCounter++;
  423 0000042C E1A06000        MOV              R6, R0      ; prevNumber = 2;
  424 00000430         
  425 00000430 E3570004        CMP              R7, #4      ; if (redCounter >=
                                                             4) {
  426 00000434 2A000056        BHS              redWin      ; }
  427 00000438 E3580004        CMP              R8, #4      ; if (yellowCounter
                                                             >= 4) {
  428 0000043C 2A000057        BHS              yelWin      ; } 
  429 00000440 EAFFFFDD        B                ff          ; }
  430 00000444         
  431 00000444 E3A0A000 
                       fasd    MOV              R10, #0     ; offSet2 = 0;
  432 00000448 E28BB001        ADD              R11, R11, #1 ; counter2++;
  433 0000044C EAFFFFE4        B                aga         ; }
  434 00000450         
  435 00000450 E35B0000 
                       fs      CMP              R11, #0     ; if (counter2 == 0
                                                            ) {
  436 00000454 0A000005        BEQ              first       ; }
  437 00000458 E35B0001        CMP              R11, #1     ; if (counter2 == 1
                                                            ) {
  438 0000045C 0A000005        BEQ              second      ; }



ARM Macro Assembler    Page 11 


  439 00000460 E35B0002        CMP              R11, #2     ; if (counter2 == 2
                                                            ) {
  440 00000464 0A000005        BEQ              third       ; }
  441 00000468 E35B0003        CMP              R11, #3     ; if (counter2 == 3
                                                            ) {
  442 0000046C 0A000008        BEQ              nof         ; }
  443 00000470 E59F4314 
                       first   LDR              R4, =0x400000B0 
                                                            ; BOARD[1][column]
  444 00000474 EA000002        B                ass         ; }
  445 00000478 E59F4368 
                       second  LDR              R4, =0x400000CC 
                                                            ; BOARD[2][column]
  446 0000047C EA000000        B                ass         ; }
  447 00000480 E59F4364 
                       third   LDR              R4, =0x400000E8 
                                                            ; BOARD[3][column]
  448 00000484 E084400A 
                       ass     ADD              R4, R4, R10 ; MEM[BOARD] += off
                                                            Set2;
  449 00000488 E3A05000        MOV              R5, #0      ; counter = 0;
  450 0000048C E3A0C000        MOV              R12, #0     ; offSet = 0;
  451 00000490 EAFFFFC9        B                ff          ; } 
  452 00000494         
  453 00000494 E8BD9FF0 
                       nof     POP              {R4 - R12, pc} ; POP
  454 00000498         
  455 00000498         ;
  456 00000498         ;
  457 00000498         ;
  458 00000498         checkDiagonalBackward
  459 00000498 E92D5FF0        PUSH             {R4 - R12, lr} ; PUSH
  460 0000049C         
  461 0000049C E59F434C        LDR              R4, =0x40000104 ; BOARD[row][co
                                                            lumn]
  462 000004A0         
  463 000004A0 E3550006 
                       bf      CMP              R5, #6      ; if (counter > 6) 
                                                            {
  464 000004A4 2A000022        BHS              bs          ; }
  465 000004A8 E794010C        LDR              R0, [R4, R12, LSL #2] ; load = 
                                                            BOARD[row][column];
                                                            
  466 000004AC E24CC006        SUB              R12, R12, #6 ; offSet -= 6;
  467 000004B0 E2855001        ADD              R5, R5, #1  ; counter++
  468 000004B4         
  469 000004B4 E3550006        CMP              R5, #6      ; if (counter == 6)
                                                             {
  470 000004B8 1A000002        BNE              bab         ; }
  471 000004BC E28AA004        ADD              R10, R10, #4 ; offSet2 += 4;
  472 000004C0 E35A0010        CMP              R10, #16    ; if (offSet2 == 16
                                                            ) {
  473 000004C4 0A000017        BEQ              basd        ; }
  474 000004C8         
  475 000004C8 E3500000 
                       bab     CMP              R0, #0      ; if (blank) {
  476 000004CC 1A000001        BNE              bred        ; }
  477 000004D0 E1A06000        MOV              R6, R0      ; prevNumber = 0;
  478 000004D4 EA00000E        B                bck         ; }



ARM Macro Assembler    Page 12 


  479 000004D8         
  480 000004D8 E3500001 
                       bred    CMP              R0, #1      ; if (red) {
  481 000004DC 1A000005        BNE              byel        ; else {yellow}
  482 000004E0 E1560000        CMP              R6, R0      ; if (prevNumber ==
                                                             1) {
  483 000004E4 0A000000        BEQ              winRedb     ; }
  484 000004E8 E3A07000        MOV              R7, #0      ; redCounter = 0;
  485 000004EC E2877001 
                       winRedb ADD              R7, R7, #1  ; redCounter++;
  486 000004F0 E1A06000        MOV              R6, R0      ; prevNumber = 1;
  487 000004F4 EA000006        B                bck         ; }
  488 000004F8         
  489 000004F8 E3500002 
                       byel    CMP              R0, #2      ; if (yellow) {
  490 000004FC 1A00001D        BNE              nob         ; else {noCheck}
  491 00000500 E1560000        CMP              R6, R0      ; if (prevNumber ==
                                                             2) { 
  492 00000504 0A000000        BEQ              winYelb     ; }
  493 00000508 E3A08000        MOV              R8, #0      ; yellowCounter = 0
                                                            ;
  494 0000050C E2888001 
                       winYelb ADD              R8, R8, #1  ; yellowCounter++;
  495 00000510 E1A06000        MOV              R6, R0      ; prevNumber = 2;
  496 00000514         
  497 00000514 E3570004 
                       bck     CMP              R7, #4      ; if (redCounter >=
                                                             4) {
  498 00000518 2A00001D        BHS              redWin      ; }
  499 0000051C E3580004        CMP              R8, #4      ; if (yellowCounter
                                                             >= 4) {
  500 00000520 2A00001E        BHS              yelWin      ; } 
  501 00000524 EAFFFFDD        B                bf          ; }
  502 00000528         
  503 00000528 E3A0A000 
                       basd    MOV              R10, #0     ; offSet2 = 0;
  504 0000052C E28BB001        ADD              R11, R11, #1 ; counter2++;
  505 00000530 EAFFFFE4        B                bab         ; }
  506 00000534         
  507 00000534 E35B0000 
                       bs      CMP              R11, #0     ; if (counter2 == 0
                                                            ) {
  508 00000538 0A000005        BEQ              bfirst      ; }
  509 0000053C E35B0001        CMP              R11, #1     ; if (counter2 == 1
                                                            ) {
  510 00000540 0A000005        BEQ              bsecond     ; }
  511 00000544 E35B0002        CMP              R11, #2     ; if (counter2 == 2
                                                            ) {
  512 00000548 0A000005        BEQ              bthird      ; }
  513 0000054C E35B0003        CMP              R11, #3     ; if (counter2 == 3
                                                            ) {
  514 00000550 0A000008        BEQ              nob         ; }
  515 00000554 E59F4294 
                       bfirst  LDR              R4, =0x40000104 
                                                            ; BOARD[4][column]
  516 00000558 EA000002        B                as          ; }
  517 0000055C E59F4290 
                       bsecond LDR              R4, =0x40000120 
                                                            ; BOARD[5][column]



ARM Macro Assembler    Page 13 


  518 00000560 EA000000        B                as          ; }
  519 00000564 E59F425C 
                       bthird  LDR              R4, =0x4000013C 
                                                            ; BOARD[6][column]
  520 00000568 E084400A 
                       as      ADD              R4, R4, R10 ; MEM[BOARD] += off
                                                            Set2;
  521 0000056C E3A05000        MOV              R5, #0      ; counter = 0;
  522 00000570 E3A0C000        MOV              R12, #0     ; offSet = 0;
  523 00000574 EAFFFFC9        B                bf          ; }
  524 00000578         
  525 00000578 E8BD9FF0 
                       nob     POP              {R4 - R12, pc} ; POP
  526 0000057C         ;
  527 0000057C         ; End Messages
  528 0000057C         ;
  529 0000057C E59F024C 
                       noSpace LDR              R0, =BoardFull ; [BoardFull]
  530 00000580 EB000022        BL               puts        ;
  531 00000584 EAFFFEA7        B                stop        ; stop
  532 00000588         
  533 00000588 E59F0244 
                       quit    LDR              R0, =Quit   ; [quit]
  534 0000058C EB00001F        BL               puts        ;
  535 00000590 EAFFFEA4        B                stop        ; stop
  536 00000594         
  537 00000594 E59F023C 
                       redWin  LDR              R0, =RedWins ; [RedWins]
  538 00000598 EB00001C        BL               puts        ;
  539 0000059C EAFFFEA1        B                stop        ; stop
  540 000005A0         
  541 000005A0 E59F0234 
                       yelWin  LDR              R0, =YellowWins ; [YellowWins]
  542 000005A4 EB000019        BL               puts        ;
  543 000005A8 EAFFFE9E        B                stop        ; stop
  544 000005AC         
  545 000005AC         ;
  546 000005AC         ; inithw subroutines
  547 000005AC         ; performs hardware initialisation, including console
  548 000005AC         ;
  549 000005AC         inithw
  550 000005AC E59F0254        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  551 000005B0 E3A01050        MOV              R1, #0x50
  552 000005B4 E5C01000        STRB             R1, [R0]
  553 000005B8 E59F024C        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
  554 000005BC E3A01002        LDR              R1, =0x02
  555 000005C0 E5C01000        STRB             R1, [R0]
  556 000005C4 E12FFF1E        BX               LR
  557 000005C8         
  558 000005C8         ;
  559 000005C8         ; get subroutine
  560 000005C8         ; returns the ASCII code of the next character read on t
                       he console
  561 000005C8         ;
  562 000005C8 E59F1240 
                       get     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)



ARM Macro Assembler    Page 14 


  563 000005CC E5910000 
                       get0    LDR              R0, [R1]    ; wait until
  564 000005D0 E2100001        ANDS             R0, #0x01   ; receiver data
  565 000005D4 0AFFFFFC        BEQ              get0        ; ready
  566 000005D8 E59F1234        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  567 000005DC E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  568 000005E0 E12FFF1E        BX               LR          ; return
  569 000005E4         
  570 000005E4         ;
  571 000005E4         ; put subroutine
  572 000005E4         ; writes a character to the console
  573 000005E4         ;
  574 000005E4 E59F1224 
                       put     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  575 000005E8 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  576 000005EC E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  577 000005F0 0AFFFFFB        BEQ              put         ; empty
  578 000005F4 E59F1218        LDR              R1, =U0THR  ; R1 -> U0THR
  579 000005F8 E5C10000        STRB             R0, [R1]    ; output charcter
  580 000005FC E59F120C 
                       put0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  581 00000600 E5D11000        LDRB             R1, [R1]    ; wait until
  582 00000604 E2111040        ANDS             R1, R1, #0x40 ; transmitter
  583 00000608 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)
  584 0000060C E12FFF1E        BX               LR          ; return
  585 00000610         
  586 00000610         ;
  587 00000610         ; puts subroutine
  588 00000610         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  589 00000610         ;
  590 00000610 E92D4010 
                       puts    STMFD            SP!, {R4, LR} ; push R4 and LR
  591 00000614 E1A04000        MOV              R4, R0      ; copy R0
  592 00000618 E4D40001 
                       puts0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  593 0000061C E3500000        CMP              R0, #0      ; 0?
  594 00000620 0A000001        BEQ              puts1       ; return
  595 00000624 EBFFFFEE        BL               put         ; put character
  596 00000628 EAFFFFFA        B                puts0       ; next character
  597 0000062C E8BD8010 
                       puts1   LDMFD            SP!, {R4, PC} ; pop R4 and PC
  598 00000630         
  599 00000630         
  600 00000630         ;
  601 00000630         ; hint! put the strings used by your program here ...
  602 00000630         ;
  603 00000630         
  604 00000630         str_go
  605 00000630 4C 65 74 
              27 73 20 



ARM Macro Assembler    Page 15 


              70 6C 61 
              79 20 43 
              6F 6E 6E 
              65 63 74 
              34 21 21 
              0A 0D 0A 
              0D 00            DCB              "Let's play Connect4!!",0xA, 0x
D, 0xA, 0xD, 0x0
  606 0000064A         
  607 0000064A         NewLine
  608 0000064A 0A 0D 00        DCB              0xA, 0xD, 0x0
  609 0000064D         
  610 0000064D         RedsTurn
  611 0000064D 52 45 44 
              3A 20 63 
              68 6F 6F 
              73 65 20 
              61 20 63 
              6F 6C 75 
              6D 6E 20 
              66 6F 72 
              20 79 6F 
              75 72 20 
              6E 65 78 
              74 20 6D 
              6F 76 65 
              20 28 31 
              2D 37 2C 
              20 71 20 
              74 6F 20 
              72 65 73 
              74 61 72 
              74 29 3A 
              20 00            DCB              "RED: choose a column for your 
next move (1-7, q to restart): ", 0
  612 0000068B         
  613 0000068B         YellowsTurn
  614 0000068B 59 45 4C 
              4C 4F 57 
              3A 20 63 
              68 6F 6F 
              73 65 20 
              61 20 63 
              6F 6C 75 
              6D 6E 20 
              66 6F 72 
              20 79 6F 
              75 72 20 
              6E 65 78 
              74 20 6D 
              6F 76 65 
              20 28 31 
              2D 37 2C 
              20 71 20 
              74 6F 20 
              72 65 73 
              74 61 72 
              74 29 3A 
              20 00            DCB              "YELLOW: choose a column for yo



ARM Macro Assembler    Page 16 


ur next move (1-7, q to restart): ", 0
  615 000006CC         
  616 000006CC         InvalidInput
  617 000006CC 49 6E 76 
              61 6C 69 
              64 20 49 
              6E 70 75 
              74 21 20 
              50 6C 65 
              61 73 65 
              20 74 72 
              79 20 61 
              67 61 69 
              6E 2E 00         DCB              "Invalid Input! Please try agai
n.", 0
  618 000006ED         
  619 000006ED         Quit
  620 000006ED 0A 54 68 
              61 6E 6B 
              20 79 6F 
              75 20 66 
              6F 72 20 
              70 6C 61 
              79 69 6E 
              67 20 43 
              6F 6E 6E 
              65 63 74 
              20 46 6F 
              75 72 21 
              00               DCB              "\nThank you for playing Connec
t Four!", 0
  621 00000712         
  622 00000712         Rows
  623 00000712 20 20 31 
              20 32 20 
              33 20 34 
              20 35 20 
              36 20 37 
              00               DCB              "  1 2 3 4 5 6 7", 0
  624 00000722         
  625 00000722         Red
  626 00000722 52 20 00        DCB              "R ", 0
  627 00000725         
  628 00000725         Yellow
  629 00000725 59 20 00        DCB              "Y ", 0
  630 00000728         
  631 00000728         Blank
  632 00000728 30 20 00        DCB              "0 ", 0
  633 0000072B         
  634 0000072B         column1
  635 0000072B 31 20 00        DCB              "1 ", 0
  636 0000072E         
  637 0000072E         column2
  638 0000072E 32 20 00        DCB              "2 ", 0
  639 00000731         
  640 00000731         column3
  641 00000731 33 20 00        DCB              "3 ", 0
  642 00000734         
  643 00000734         column4



ARM Macro Assembler    Page 17 


  644 00000734 34 20 00        DCB              "4 ", 0
  645 00000737         
  646 00000737         column5
  647 00000737 35 20 00        DCB              "5 ", 0
  648 0000073A         
  649 0000073A         column6
  650 0000073A 36 20 00        DCB              "6 ", 0
  651 0000073D         
  652 0000073D         RedWins
  653 0000073D 52 45 44 
              20 50 4C 
              41 59 45 
              52 20 48 
              41 53 20 
              57 4F 4E 
              21 00            DCB              "RED PLAYER HAS WON!", 0
  654 00000751         
  655 00000751         YellowWins
  656 00000751 59 45 4C 
              4C 4F 57 
              20 50 4C 
              41 59 45 
              52 20 48 
              41 53 20 
              57 4F 4E 
              21 00            DCB              "YELLOW PLAYER HAS WON!", 0
  657 00000768         
  658 00000768         BoardFull
  659 00000768 54 48 45 
              20 47 41 
              4D 45 20 
              45 4E 44 
              45 44 20 
              49 4E 20 
              41 20 44 
              52 41 57 
              21 00            DCB              "THE GAME ENDED IN A DRAW!", 0
  660 00000782         
  661 00000782                 END
              00 00 40010000 
              00000000 
              400000B0 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              4000013C 
              00000000 
              00000000 



ARM Macro Assembler    Page 18 


              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              400000CC 
              400000E8 
              40000104 
              40000120 
              00000000 
              00000000 
              00000000 
              00000000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\connect4.d -o.\objects\connect4.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5
\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 526" --list=.\listings\connect4.lst connect4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BOARD 00000000

Symbol: BOARD
   Definitions
      At line 16 in file connect4.s
   Uses
      At line 63 in file connect4.s
Comment: BOARD used once
globals 00000000

Symbol: globals
   Definitions
      At line 15 in file connect4.s
   Uses
      None
Comment: globals unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Blank 00000728

Symbol: Blank
   Definitions
      At line 631 in file connect4.s
   Uses
      At line 133 in file connect4.s
Comment: Blank used once
BoardFull 00000768

Symbol: BoardFull
   Definitions
      At line 658 in file connect4.s
   Uses
      At line 529 in file connect4.s
Comment: BoardFull used once
CkV 000002F8

Symbol: CkV
   Definitions
      At line 326 in file connect4.s
   Uses
      At line 373 in file connect4.s
      At line 379 in file connect4.s

InvalidInput 000006CC

Symbol: InvalidInput
   Definitions
      At line 616 in file connect4.s
   Uses
      At line 212 in file connect4.s
Comment: InvalidInput used once
NewLine 0000064A

Symbol: NewLine
   Definitions
      At line 607 in file connect4.s
   Uses
      At line 92 in file connect4.s
      At line 149 in file connect4.s
      At line 151 in file connect4.s
      At line 208 in file connect4.s
      At line 210 in file connect4.s
      At line 225 in file connect4.s
      At line 227 in file connect4.s

Quit 000006ED

Symbol: Quit
   Definitions
      At line 619 in file connect4.s
   Uses
      At line 533 in file connect4.s
Comment: Quit used once
RESET 00000000

Symbol: RESET
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 24 in file connect4.s
   Uses
      None
Comment: RESET unused
Red 00000722

Symbol: Red
   Definitions
      At line 625 in file connect4.s
   Uses
      At line 139 in file connect4.s
Comment: Red used once
RedWins 0000073D

Symbol: RedWins
   Definitions
      At line 652 in file connect4.s
   Uses
      At line 537 in file connect4.s
Comment: RedWins used once
RedsTurn 0000064D

Symbol: RedsTurn
   Definitions
      At line 610 in file connect4.s
   Uses
      At line 169 in file connect4.s
Comment: RedsTurn used once
Rows 00000712

Symbol: Rows
   Definitions
      At line 622 in file connect4.s
   Uses
      At line 81 in file connect4.s
Comment: Rows used once
Yellow 00000725

Symbol: Yellow
   Definitions
      At line 628 in file connect4.s
   Uses
      At line 143 in file connect4.s
Comment: Yellow used once
YellowWins 00000751

Symbol: YellowWins
   Definitions
      At line 655 in file connect4.s
   Uses
      At line 541 in file connect4.s
Comment: YellowWins used once
YellowsTurn 0000068B

Symbol: YellowsTurn
   Definitions
      At line 613 in file connect4.s
   Uses
      At line 173 in file connect4.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: YellowsTurn used once
aga 000003E4

Symbol: aga
   Definitions
      At line 403 in file connect4.s
   Uses
      At line 398 in file connect4.s
      At line 433 in file connect4.s

as 00000568

Symbol: as
   Definitions
      At line 520 in file connect4.s
   Uses
      At line 516 in file connect4.s
      At line 518 in file connect4.s

ass 00000484

Symbol: ass
   Definitions
      At line 448 in file connect4.s
   Uses
      At line 444 in file connect4.s
      At line 446 in file connect4.s

bab 000004C8

Symbol: bab
   Definitions
      At line 475 in file connect4.s
   Uses
      At line 470 in file connect4.s
      At line 505 in file connect4.s

basd 00000528

Symbol: basd
   Definitions
      At line 503 in file connect4.s
   Uses
      At line 473 in file connect4.s
Comment: basd used once
bck 00000514

Symbol: bck
   Definitions
      At line 497 in file connect4.s
   Uses
      At line 478 in file connect4.s
      At line 487 in file connect4.s

bf 000004A0

Symbol: bf
   Definitions
      At line 463 in file connect4.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 501 in file connect4.s
      At line 523 in file connect4.s

bfirst 00000554

Symbol: bfirst
   Definitions
      At line 515 in file connect4.s
   Uses
      At line 508 in file connect4.s
Comment: bfirst used once
boardF 00000234

Symbol: boardF
   Definitions
      At line 256 in file connect4.s
   Uses
      At line 262 in file connect4.s
Comment: boardF used once
bred 000004D8

Symbol: bred
   Definitions
      At line 480 in file connect4.s
   Uses
      At line 476 in file connect4.s
Comment: bred used once
bs 00000534

Symbol: bs
   Definitions
      At line 507 in file connect4.s
   Uses
      At line 464 in file connect4.s
Comment: bs used once
bsecond 0000055C

Symbol: bsecond
   Definitions
      At line 517 in file connect4.s
   Uses
      At line 510 in file connect4.s
Comment: bsecond used once
bthird 00000564

Symbol: bthird
   Definitions
      At line 519 in file connect4.s
   Uses
      At line 512 in file connect4.s
Comment: bthird used once
byel 000004F8

Symbol: byel
   Definitions
      At line 489 in file connect4.s
   Uses
      At line 481 in file connect4.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: byel used once
checkBoardFull 0000022C

Symbol: checkBoardFull
   Definitions
      At line 251 in file connect4.s
   Uses
      At line 245 in file connect4.s
Comment: checkBoardFull used once
checkDiagonalBackward 00000498

Symbol: checkDiagonalBackward
   Definitions
      At line 458 in file connect4.s
   Uses
      At line 243 in file connect4.s
Comment: checkDiagonalBackward used once
checkDiagonalForward 000003B4

Symbol: checkDiagonalForward
   Definitions
      At line 386 in file connect4.s
   Uses
      At line 242 in file connect4.s
Comment: checkDiagonalForward used once
checkHorizontal 00000254

Symbol: checkHorizontal
   Definitions
      At line 268 in file connect4.s
   Uses
      At line 240 in file connect4.s
Comment: checkHorizontal used once
checkVertical 000002F0

Symbol: checkVertical
   Definitions
      At line 321 in file connect4.s
   Uses
      At line 241 in file connect4.s
Comment: checkVertical used once
checkWinner 00000210

Symbol: checkWinner
   Definitions
      At line 237 in file connect4.s
   Uses
      At line 43 in file connect4.s
Comment: checkWinner used once
ckBoard 0000025C

Symbol: ckBoard
   Definitions
      At line 273 in file connect4.s
   Uses
      At line 313 in file connect4.s
Comment: ckBoard used once
col2 000000A0




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: col2
   Definitions
      At line 103 in file connect4.s
   Uses
      At line 98 in file connect4.s
Comment: col2 used once
col3 000000B4

Symbol: col3
   Definitions
      At line 109 in file connect4.s
   Uses
      At line 104 in file connect4.s
Comment: col3 used once
col4 000000C8

Symbol: col4
   Definitions
      At line 115 in file connect4.s
   Uses
      At line 110 in file connect4.s
Comment: col4 used once
col5 000000DC

Symbol: col5
   Definitions
      At line 121 in file connect4.s
   Uses
      At line 116 in file connect4.s
Comment: col5 used once
col6 000000F0

Symbol: col6
   Definitions
      At line 127 in file connect4.s
   Uses
      At line 122 in file connect4.s
Comment: col6 used once
column1 0000072B

Symbol: column1
   Definitions
      At line 634 in file connect4.s
   Uses
      At line 99 in file connect4.s
Comment: column1 used once
column2 0000072E

Symbol: column2
   Definitions
      At line 637 in file connect4.s
   Uses
      At line 105 in file connect4.s
Comment: column2 used once
column3 00000731

Symbol: column3
   Definitions
      At line 640 in file connect4.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 111 in file connect4.s
Comment: column3 used once
column4 00000734

Symbol: column4
   Definitions
      At line 643 in file connect4.s
   Uses
      At line 117 in file connect4.s
Comment: column4 used once
column5 00000737

Symbol: column5
   Definitions
      At line 646 in file connect4.s
   Uses
      At line 123 in file connect4.s
Comment: column5 used once
column6 0000073A

Symbol: column6
   Definitions
      At line 649 in file connect4.s
   Uses
      At line 127 in file connect4.s
Comment: column6 used once
cont 00000284

Symbol: cont
   Definitions
      At line 285 in file connect4.s
   Uses
      At line 280 in file connect4.s
Comment: cont used once
count 0000012C

Symbol: count
   Definitions
      At line 146 in file connect4.s
   Uses
      At line 135 in file connect4.s
      At line 141 in file connect4.s

drBoard 00000064

Symbol: drBoard
   Definitions
      At line 86 in file connect4.s
   Uses
      At line 147 in file connect4.s
Comment: drBoard used once
drawBoard 00000054

Symbol: drawBoard
   Definitions
      At line 78 in file connect4.s
   Uses
      At line 42 in file connect4.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

Comment: drawBoard used once
enBoard 00000050

Symbol: enBoard
   Definitions
      At line 72 in file connect4.s
   Uses
      At line 66 in file connect4.s
Comment: enBoard used once
enFull 00000250

Symbol: enFull
   Definitions
      At line 264 in file connect4.s
   Uses
      At line 260 in file connect4.s
Comment: enFull used once
fasd 00000444

Symbol: fasd
   Definitions
      At line 431 in file connect4.s
   Uses
      At line 401 in file connect4.s
Comment: fasd used once
ff 000003BC

Symbol: ff
   Definitions
      At line 391 in file connect4.s
   Uses
      At line 406 in file connect4.s
      At line 415 in file connect4.s
      At line 429 in file connect4.s
      At line 451 in file connect4.s

first 00000470

Symbol: first
   Definitions
      At line 443 in file connect4.s
   Uses
      At line 436 in file connect4.s
Comment: first used once
fred 000003F4

Symbol: fred
   Definitions
      At line 408 in file connect4.s
   Uses
      At line 404 in file connect4.s
Comment: fred used once
fs 00000450

Symbol: fs
   Definitions
      At line 435 in file connect4.s
   Uses
      At line 392 in file connect4.s



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

Comment: fs used once
fyel 00000414

Symbol: fyel
   Definitions
      At line 417 in file connect4.s
   Uses
      At line 409 in file connect4.s
Comment: fyel used once
get 000005C8

Symbol: get
   Definitions
      At line 562 in file connect4.s
   Uses
      At line 176 in file connect4.s
Comment: get used once
get0 000005CC

Symbol: get0
   Definitions
      At line 563 in file connect4.s
   Uses
      At line 565 in file connect4.s
Comment: get0 used once
inBoard 00000038

Symbol: inBoard
   Definitions
      At line 65 in file connect4.s
   Uses
      At line 70 in file connect4.s
Comment: inBoard used once
inithw 000005AC

Symbol: inithw
   Definitions
      At line 549 in file connect4.s
   Uses
      At line 31 in file connect4.s
Comment: inithw used once
initialiseBoard 0000002C

Symbol: initialiseBoard
   Definitions
      At line 59 in file connect4.s
   Uses
      At line 40 in file connect4.s
Comment: initialiseBoard used once
load 0000039C

Symbol: load
   Definitions
      At line 375 in file connect4.s
   Uses
      At line 361 in file connect4.s
      At line 363 in file connect4.s
      At line 365 in file connect4.s
      At line 367 in file connect4.s



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

      At line 369 in file connect4.s
      At line 371 in file connect4.s

loopCk 000002D4

Symbol: loopCk
   Definitions
      At line 308 in file connect4.s
   Uses
      At line 288 in file connect4.s
      At line 297 in file connect4.s
      At line 306 in file connect4.s

makeMove 00000148

Symbol: makeMove
   Definitions
      At line 161 in file connect4.s
   Uses
      At line 44 in file connect4.s
Comment: makeMove used once
noCheck 000002EC

Symbol: noCheck
   Definitions
      At line 316 in file connect4.s
   Uses
      At line 274 in file connect4.s
      At line 300 in file connect4.s

noDraw 00000134

Symbol: noDraw
   Definitions
      At line 149 in file connect4.s
   Uses
      At line 87 in file connect4.s
Comment: noDraw used once
noInput 000001C4

Symbol: noInput
   Definitions
      At line 208 in file connect4.s
   Uses
      At line 186 in file connect4.s
      At line 189 in file connect4.s
      At line 204 in file connect4.s

noSpace 0000057C

Symbol: noSpace
   Definitions
      At line 529 in file connect4.s
   Uses
      At line 257 in file connect4.s
Comment: noSpace used once
noV 000003B0

Symbol: noV



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 381 in file connect4.s
   Uses
      At line 327 in file connect4.s
      At line 346 in file connect4.s

nob 00000578

Symbol: nob
   Definitions
      At line 525 in file connect4.s
   Uses
      At line 490 in file connect4.s
      At line 514 in file connect4.s

nof 00000494

Symbol: nof
   Definitions
      At line 453 in file connect4.s
   Uses
      At line 418 in file connect4.s
      At line 442 in file connect4.s

nxCol 000000F8

Symbol: nxCol
   Definitions
      At line 130 in file connect4.s
   Uses
      At line 91 in file connect4.s
      At line 101 in file connect4.s
      At line 107 in file connect4.s
      At line 113 in file connect4.s
      At line 119 in file connect4.s
      At line 125 in file connect4.s

place 000001E0

Symbol: place
   Definitions
      At line 216 in file connect4.s
   Uses
      At line 199 in file connect4.s
Comment: place used once
put 000005E4

Symbol: put
   Definitions
      At line 574 in file connect4.s
   Uses
      At line 178 in file connect4.s
      At line 577 in file connect4.s
      At line 595 in file connect4.s

put0 000005FC

Symbol: put0
   Definitions



ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Relocatable symbols

      At line 580 in file connect4.s
   Uses
      At line 583 in file connect4.s
Comment: put0 used once
puts 00000610

Symbol: puts
   Definitions
      At line 590 in file connect4.s
   Uses
      At line 38 in file connect4.s
      At line 82 in file connect4.s
      At line 93 in file connect4.s
      At line 100 in file connect4.s
      At line 106 in file connect4.s
      At line 112 in file connect4.s
      At line 118 in file connect4.s
      At line 124 in file connect4.s
      At line 128 in file connect4.s
      At line 134 in file connect4.s
      At line 140 in file connect4.s
      At line 144 in file connect4.s
      At line 150 in file connect4.s
      At line 152 in file connect4.s
      At line 170 in file connect4.s
      At line 174 in file connect4.s
      At line 209 in file connect4.s
      At line 211 in file connect4.s
      At line 213 in file connect4.s
      At line 226 in file connect4.s
      At line 228 in file connect4.s
      At line 530 in file connect4.s
      At line 534 in file connect4.s
      At line 538 in file connect4.s
      At line 542 in file connect4.s

puts0 00000618

Symbol: puts0
   Definitions
      At line 592 in file connect4.s
   Uses
      At line 596 in file connect4.s
Comment: puts0 used once
puts1 0000062C

Symbol: puts1
   Definitions
      At line 597 in file connect4.s
   Uses
      At line 594 in file connect4.s
Comment: puts1 used once
quit 00000588

Symbol: quit
   Definitions
      At line 533 in file connect4.s
   Uses
      At line 181 in file connect4.s



ARM Macro Assembler    Page 13 Alphabetic symbol ordering
Relocatable symbols

Comment: quit used once
re 000001FC

Symbol: re
   Definitions
      At line 225 in file connect4.s
   Uses
      At line 214 in file connect4.s
      At line 222 in file connect4.s

red 00000294

Symbol: red
   Definitions
      At line 290 in file connect4.s
   Uses
      At line 286 in file connect4.s
Comment: red used once
redMove 00000110

Symbol: redMove
   Definitions
      At line 137 in file connect4.s
   Uses
      At line 132 in file connect4.s
Comment: redMove used once
redWin 00000594

Symbol: redWin
   Definitions
      At line 537 in file connect4.s
   Uses
      At line 309 in file connect4.s
      At line 356 in file connect4.s
      At line 426 in file connect4.s
      At line 498 in file connect4.s

rep 000001A4

Symbol: rep
   Definitions
      At line 197 in file connect4.s
   Uses
      At line 205 in file connect4.s
Comment: rep used once
repeat 00000018

Symbol: repeat
   Definitions
      At line 42 in file connect4.s
   Uses
      At line 45 in file connect4.s
Comment: repeat used once
second 00000478

Symbol: second
   Definitions
      At line 445 in file connect4.s
   Uses



ARM Macro Assembler    Page 14 Alphabetic symbol ordering
Relocatable symbols

      At line 438 in file connect4.s
Comment: second used once
sk 00000170

Symbol: sk
   Definitions
      At line 176 in file connect4.s
   Uses
      At line 171 in file connect4.s
Comment: sk used once
stop 00000028

Symbol: stop
   Definitions
      At line 48 in file connect4.s
   Uses
      At line 48 in file connect4.s
      At line 531 in file connect4.s
      At line 535 in file connect4.s
      At line 539 in file connect4.s
      At line 543 in file connect4.s

str_go 00000630

Symbol: str_go
   Definitions
      At line 604 in file connect4.s
   Uses
      At line 37 in file connect4.s
Comment: str_go used once
third 00000480

Symbol: third
   Definitions
      At line 447 in file connect4.s
   Uses
      At line 440 in file connect4.s
Comment: third used once
vch 00000354

Symbol: vch
   Definitions
      At line 353 in file connect4.s
   Uses
      At line 334 in file connect4.s
      At line 343 in file connect4.s

vred 00000318

Symbol: vred
   Definitions
      At line 336 in file connect4.s
   Uses
      At line 332 in file connect4.s
Comment: vred used once
vyel 00000338

Symbol: vyel
   Definitions



ARM Macro Assembler    Page 15 Alphabetic symbol ordering
Relocatable symbols

      At line 345 in file connect4.s
   Uses
      At line 337 in file connect4.s
Comment: vyel used once
winRed 000002A8

Symbol: winRed
   Definitions
      At line 295 in file connect4.s
   Uses
      At line 293 in file connect4.s
Comment: winRed used once
winRedV 0000032C

Symbol: winRedV
   Definitions
      At line 341 in file connect4.s
   Uses
      At line 339 in file connect4.s
Comment: winRedV used once
winRedb 000004EC

Symbol: winRedb
   Definitions
      At line 485 in file connect4.s
   Uses
      At line 483 in file connect4.s
Comment: winRedb used once
winRedf 00000408

Symbol: winRedf
   Definitions
      At line 413 in file connect4.s
   Uses
      At line 411 in file connect4.s
Comment: winRedf used once
winYel 000002C8

Symbol: winYel
   Definitions
      At line 304 in file connect4.s
   Uses
      At line 302 in file connect4.s
Comment: winYel used once
winYelV 0000034C

Symbol: winYelV
   Definitions
      At line 350 in file connect4.s
   Uses
      At line 348 in file connect4.s
Comment: winYelV used once
winYelb 0000050C

Symbol: winYelb
   Definitions
      At line 494 in file connect4.s
   Uses
      At line 492 in file connect4.s



ARM Macro Assembler    Page 16 Alphabetic symbol ordering
Relocatable symbols

Comment: winYelb used once
winYelf 00000428

Symbol: winYelf
   Definitions
      At line 422 in file connect4.s
   Uses
      At line 420 in file connect4.s
Comment: winYelf used once
yel 000002B4

Symbol: yel
   Definitions
      At line 299 in file connect4.s
   Uses
      At line 291 in file connect4.s
Comment: yel used once
yelMove 00000124

Symbol: yelMove
   Definitions
      At line 143 in file connect4.s
   Uses
      At line 138 in file connect4.s
Comment: yelMove used once
yelTurn 00000168

Symbol: yelTurn
   Definitions
      At line 173 in file connect4.s
   Uses
      At line 168 in file connect4.s
Comment: yelTurn used once
yelWin 000005A0

Symbol: yelWin
   Definitions
      At line 541 in file connect4.s
   Uses
      At line 311 in file connect4.s
      At line 358 in file connect4.s
      At line 428 in file connect4.s
      At line 500 in file connect4.s

yt 000001F8

Symbol: yt
   Definitions
      At line 223 in file connect4.s
   Uses
      At line 220 in file connect4.s
Comment: yt used once
108 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 8 in file connect4.s
   Uses
      At line 550 in file connect4.s
Comment: PINSEL0 used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 11 in file connect4.s
   Uses
      At line 553 in file connect4.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 12 in file connect4.s
   Uses
      At line 562 in file connect4.s
      At line 574 in file connect4.s
      At line 580 in file connect4.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 9 in file connect4.s
   Uses
      At line 566 in file connect4.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 10 in file connect4.s
   Uses
      At line 578 in file connect4.s
Comment: U0THR used once
5 symbols
449 symbols in table
